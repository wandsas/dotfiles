overlay - Overlay filesystem	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)

cfg80211 - wireless configuration support	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)

garp - 
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)

mrp - 
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)

nf_conntrack - 
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)

intel_powerclamp - Package Level C-state Idle Injection for Intel CPUs	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.

coretemp - Intel Core temperature monitor	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)

gpio_ich - GPIO interface for Intel ICH series	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)

snd_hda_codec_hdmi - HDMI HD-audio codec	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)

kvm_intel - 
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)

snd_hda_intel - Intel HDA driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)

snd_intel_dspcfg - Intel DSP config driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)

snd_intel_sdw_acpi - Intel Soundwire ACPI helpers	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)

kvm - 
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)

snd_hda_codec - HDA codec core	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)

hp_wmi - HP laptop WMI hotkeys driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)

psmouse - PS/2 mouse driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)

tpm_tis - TPM Driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)

snd_pcm - Midlevel PCM code for ALSA.	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)

tpm - TPM Driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)

i7core_edac - MC Driver for Intel i7 Core memory controllers -  Ver: 1.0.0	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)

rng_core - H/W Random Number Generator (RNG) driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)

tiny_power_button - ACPI Tiny Power Button Driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)

acpi_cpufreq - ACPI Processor P-States Driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)

sg - SCSI generic (sg) driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)

snd_seq - Advanced Linux Sound Architecture sequencer.	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)

snd_timer - ALSA timer interface	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)

snd - Advanced Linux Sound Architecture driver for soundcards.	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)

soundcore - Core sound module	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)

vhost_net - Host kernel accelerator for virtio net	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)

vhost - Host kernel accelerator for virtio	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)

hci_vhci - Bluetooth virtual HCI driver ver 1.5	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)

bluetooth - Bluetooth Core ver 2.22	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)

rfkill - RF switch support	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)

vfio_iommu_type1 - Type1 IOMMU driver for VFIO	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)

vfio - VFIO - User Level meta-driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)

dm_mod - device-mapper driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)

ppp_generic - 
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)

loop - 
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)

fuse - Filesystem in Userspace	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)

zfs - ZFS	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)

icp - 
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU

zcommon - Generic ZFS support	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.

spl - Solaris Porting Layer	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)

usbhid - USB HID core driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)

hid - 
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)

sr_mod - SCSI cdrom (sr) driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)

usb_storage - USB Mass Storage driver for Linux	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)

nouveau - nVidia Riva/TNT/GeForce/Quadro/Tesla/Tegra K1+	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)

ttm - TTM memory manager subsystem (for DRM device)	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)
	page_pool_size = 
	Number of pages in the WC/UC/DMA pool (ulong)

i2c_algo_bit - I2C-Bus bit-banging algorithm	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)
	page_pool_size = 
	Number of pages in the WC/UC/DMA pool (ulong)
	bit_test = 
	lines testing - 0 off; 1 report; 2 fail if stuck (int)

video - ACPI Video Driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)
	page_pool_size = 
	Number of pages in the WC/UC/DMA pool (ulong)
	bit_test = 
	lines testing - 0 off; 1 report; 2 fail if stuck (int)
	brightness_switch_enabled = 
	 (bool)
	allow_duplicates = 
	 (bool)
	disable_backlight_sysfs_if = 
	 (int)
	report_key_events = 
	0: none, 1: output changes, 2: brightness changes, 3: all (int)
	hw_changes_brightness = 
	Set this to 1 on buggy hw which changes the brightness itself when a hotkey is pressed: -1: auto, 0: normal 1: hw-changes-brightness (int)
	device_id_scheme = 
	 (bool)
	only_lcd = 
	 (int)

drm_kms_helper - DRM KMS helper	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)
	page_pool_size = 
	Number of pages in the WC/UC/DMA pool (ulong)
	bit_test = 
	lines testing - 0 off; 1 report; 2 fail if stuck (int)
	brightness_switch_enabled = 
	 (bool)
	allow_duplicates = 
	 (bool)
	disable_backlight_sysfs_if = 
	 (int)
	report_key_events = 
	0: none, 1: output changes, 2: brightness changes, 3: all (int)
	hw_changes_brightness = 
	Set this to 1 on buggy hw which changes the brightness itself when a hotkey is pressed: -1: auto, 0: normal 1: hw-changes-brightness (int)
	device_id_scheme = 
	 (bool)
	only_lcd = 
	 (int)
	drm_dp_cec_unregister_delay = 
	CEC unregister delay in seconds, 0: no delay, >= 1000: never unregister (uint)
	fbdev_emulation = 
	Enable legacy fbdev emulation [default=true] (bool)
	drm_fbdev_overalloc = 
	Overallocation of the fbdev buffer (%) [default=100] (int)
	edid_firmware = 
	DEPRECATED. Use drm.edid_firmware module parameter instead. (charp)
	poll = 
	 (bool)
	dp_aux_i2c_speed_khz = 
	Assumed speed of the i2c bus in kHz, (1-400, default 10) (int)
	dp_aux_i2c_transfer_size = 
	Number of bytes to transfer in a single I2C over DP AUX CH message, (1-16, default 16) (int)

uhci_hcd - USB Universal Host Controller Interface driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)
	page_pool_size = 
	Number of pages in the WC/UC/DMA pool (ulong)
	bit_test = 
	lines testing - 0 off; 1 report; 2 fail if stuck (int)
	brightness_switch_enabled = 
	 (bool)
	allow_duplicates = 
	 (bool)
	disable_backlight_sysfs_if = 
	 (int)
	report_key_events = 
	0: none, 1: output changes, 2: brightness changes, 3: all (int)
	hw_changes_brightness = 
	Set this to 1 on buggy hw which changes the brightness itself when a hotkey is pressed: -1: auto, 0: normal 1: hw-changes-brightness (int)
	device_id_scheme = 
	 (bool)
	only_lcd = 
	 (int)
	drm_dp_cec_unregister_delay = 
	CEC unregister delay in seconds, 0: no delay, >= 1000: never unregister (uint)
	fbdev_emulation = 
	Enable legacy fbdev emulation [default=true] (bool)
	drm_fbdev_overalloc = 
	Overallocation of the fbdev buffer (%) [default=100] (int)
	edid_firmware = 
	DEPRECATED. Use drm.edid_firmware module parameter instead. (charp)
	poll = 
	 (bool)
	dp_aux_i2c_speed_khz = 
	Assumed speed of the i2c bus in kHz, (1-400, default 10) (int)
	dp_aux_i2c_transfer_size = 
	Number of bytes to transfer in a single I2C over DP AUX CH message, (1-16, default 16) (int)
	ignore_oc = 
	ignore hardware overcurrent indications (bool)
	debug = 
	Debug level (int)

cec - Device node registration for cec drivers	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)
	page_pool_size = 
	Number of pages in the WC/UC/DMA pool (ulong)
	bit_test = 
	lines testing - 0 off; 1 report; 2 fail if stuck (int)
	brightness_switch_enabled = 
	 (bool)
	allow_duplicates = 
	 (bool)
	disable_backlight_sysfs_if = 
	 (int)
	report_key_events = 
	0: none, 1: output changes, 2: brightness changes, 3: all (int)
	hw_changes_brightness = 
	Set this to 1 on buggy hw which changes the brightness itself when a hotkey is pressed: -1: auto, 0: normal 1: hw-changes-brightness (int)
	device_id_scheme = 
	 (bool)
	only_lcd = 
	 (int)
	drm_dp_cec_unregister_delay = 
	CEC unregister delay in seconds, 0: no delay, >= 1000: never unregister (uint)
	fbdev_emulation = 
	Enable legacy fbdev emulation [default=true] (bool)
	drm_fbdev_overalloc = 
	Overallocation of the fbdev buffer (%) [default=100] (int)
	edid_firmware = 
	DEPRECATED. Use drm.edid_firmware module parameter instead. (charp)
	poll = 
	 (bool)
	dp_aux_i2c_speed_khz = 
	Assumed speed of the i2c bus in kHz, (1-400, default 10) (int)
	dp_aux_i2c_transfer_size = 
	Number of bytes to transfer in a single I2C over DP AUX CH message, (1-16, default 16) (int)
	ignore_oc = 
	ignore hardware overcurrent indications (bool)
	debug = 
	Debug level (int)
	debug = 
	debug level (0-2) (int)
	debug_phys_addr = 
	add CEC_CAP_PHYS_ADDR if set (bool)

ahci - AHCI SATA low-level driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)
	page_pool_size = 
	Number of pages in the WC/UC/DMA pool (ulong)
	bit_test = 
	lines testing - 0 off; 1 report; 2 fail if stuck (int)
	brightness_switch_enabled = 
	 (bool)
	allow_duplicates = 
	 (bool)
	disable_backlight_sysfs_if = 
	 (int)
	report_key_events = 
	0: none, 1: output changes, 2: brightness changes, 3: all (int)
	hw_changes_brightness = 
	Set this to 1 on buggy hw which changes the brightness itself when a hotkey is pressed: -1: auto, 0: normal 1: hw-changes-brightness (int)
	device_id_scheme = 
	 (bool)
	only_lcd = 
	 (int)
	drm_dp_cec_unregister_delay = 
	CEC unregister delay in seconds, 0: no delay, >= 1000: never unregister (uint)
	fbdev_emulation = 
	Enable legacy fbdev emulation [default=true] (bool)
	drm_fbdev_overalloc = 
	Overallocation of the fbdev buffer (%) [default=100] (int)
	edid_firmware = 
	DEPRECATED. Use drm.edid_firmware module parameter instead. (charp)
	poll = 
	 (bool)
	dp_aux_i2c_speed_khz = 
	Assumed speed of the i2c bus in kHz, (1-400, default 10) (int)
	dp_aux_i2c_transfer_size = 
	Number of bytes to transfer in a single I2C over DP AUX CH message, (1-16, default 16) (int)
	ignore_oc = 
	ignore hardware overcurrent indications (bool)
	debug = 
	Debug level (int)
	debug = 
	debug level (0-2) (int)
	debug_phys_addr = 
	add CEC_CAP_PHYS_ADDR if set (bool)
	marvell_enable = 
	Marvell SATA via AHCI (1 = enabled) (int)
	mobile_lpm_policy = 
	Default LPM policy for mobile chipsets (int)

libahci - Common AHCI SATA low-level routines	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)
	page_pool_size = 
	Number of pages in the WC/UC/DMA pool (ulong)
	bit_test = 
	lines testing - 0 off; 1 report; 2 fail if stuck (int)
	brightness_switch_enabled = 
	 (bool)
	allow_duplicates = 
	 (bool)
	disable_backlight_sysfs_if = 
	 (int)
	report_key_events = 
	0: none, 1: output changes, 2: brightness changes, 3: all (int)
	hw_changes_brightness = 
	Set this to 1 on buggy hw which changes the brightness itself when a hotkey is pressed: -1: auto, 0: normal 1: hw-changes-brightness (int)
	device_id_scheme = 
	 (bool)
	only_lcd = 
	 (int)
	drm_dp_cec_unregister_delay = 
	CEC unregister delay in seconds, 0: no delay, >= 1000: never unregister (uint)
	fbdev_emulation = 
	Enable legacy fbdev emulation [default=true] (bool)
	drm_fbdev_overalloc = 
	Overallocation of the fbdev buffer (%) [default=100] (int)
	edid_firmware = 
	DEPRECATED. Use drm.edid_firmware module parameter instead. (charp)
	poll = 
	 (bool)
	dp_aux_i2c_speed_khz = 
	Assumed speed of the i2c bus in kHz, (1-400, default 10) (int)
	dp_aux_i2c_transfer_size = 
	Number of bytes to transfer in a single I2C over DP AUX CH message, (1-16, default 16) (int)
	ignore_oc = 
	ignore hardware overcurrent indications (bool)
	debug = 
	Debug level (int)
	debug = 
	debug level (0-2) (int)
	debug_phys_addr = 
	add CEC_CAP_PHYS_ADDR if set (bool)
	marvell_enable = 
	Marvell SATA via AHCI (1 = enabled) (int)
	mobile_lpm_policy = 
	Default LPM policy for mobile chipsets (int)
	skip_host_reset = 
	skip global host reset (0=don't skip, 1=skip) (int)
	ignore_sss = 
	Ignore staggered spinup flag (0=don't ignore, 1=ignore) (int)
	ahci_em_messages = 
	AHCI Enclosure Management Message control (0 = off, 1 = on) (bool)
	devslp_idle_timeout = 
	device sleep idle timeout (int)

drm - DRM shared core routines	DRM bridge infrastructure	DRM panel infrastructure	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)
	page_pool_size = 
	Number of pages in the WC/UC/DMA pool (ulong)
	bit_test = 
	lines testing - 0 off; 1 report; 2 fail if stuck (int)
	brightness_switch_enabled = 
	 (bool)
	allow_duplicates = 
	 (bool)
	disable_backlight_sysfs_if = 
	 (int)
	report_key_events = 
	0: none, 1: output changes, 2: brightness changes, 3: all (int)
	hw_changes_brightness = 
	Set this to 1 on buggy hw which changes the brightness itself when a hotkey is pressed: -1: auto, 0: normal 1: hw-changes-brightness (int)
	device_id_scheme = 
	 (bool)
	only_lcd = 
	 (int)
	drm_dp_cec_unregister_delay = 
	CEC unregister delay in seconds, 0: no delay, >= 1000: never unregister (uint)
	fbdev_emulation = 
	Enable legacy fbdev emulation [default=true] (bool)
	drm_fbdev_overalloc = 
	Overallocation of the fbdev buffer (%) [default=100] (int)
	edid_firmware = 
	DEPRECATED. Use drm.edid_firmware module parameter instead. (charp)
	poll = 
	 (bool)
	dp_aux_i2c_speed_khz = 
	Assumed speed of the i2c bus in kHz, (1-400, default 10) (int)
	dp_aux_i2c_transfer_size = 
	Number of bytes to transfer in a single I2C over DP AUX CH message, (1-16, default 16) (int)
	ignore_oc = 
	ignore hardware overcurrent indications (bool)
	debug = 
	Debug level (int)
	debug = 
	debug level (0-2) (int)
	debug_phys_addr = 
	add CEC_CAP_PHYS_ADDR if set (bool)
	marvell_enable = 
	Marvell SATA via AHCI (1 = enabled) (int)
	mobile_lpm_policy = 
	Default LPM policy for mobile chipsets (int)
	skip_host_reset = 
	skip global host reset (0=don't skip, 1=skip) (int)
	ignore_sss = 
	Ignore staggered spinup flag (0=don't ignore, 1=ignore) (int)
	ahci_em_messages = 
	AHCI Enclosure Management Message control (0 = off, 1 = on) (bool)
	devslp_idle_timeout = 
	device sleep idle timeout (int)
	edid_firmware = 
	Do not probe monitor, use specified EDID blob from built-in data or /lib/firmware instead.  (string)
	vblankoffdelay = 
	Delay until vblank irq auto-disable [msecs] (0: never disable, <0: disable immediately) (int)
	timestamp_precision_usec = 
	Max. error on timestamps [usecs] (int)
	debug = 
	Enable debug output, where each bit enables a debug category.
			Bit 0 (0x01)  will enable CORE messages (drm core code)
			Bit 1 (0x02)  will enable DRIVER messages (drm controller code)
			Bit 2 (0x04)  will enable KMS messages (modesetting code)
			Bit 3 (0x08)  will enable PRIME messages (prime code)
			Bit 4 (0x10)  will enable ATOMIC messages (atomic code)
			Bit 5 (0x20)  will enable VBL messages (vblank code)
			Bit 7 (0x80)  will enable LEASE messages (leasing code)
			Bit 8 (0x100) will enable DP messages (displayport code) (int)
	edid_fixup = 
	Minimum number of valid EDID header bytes (0-8, default 6) (int)

libata - Library module for ATA devices	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)
	page_pool_size = 
	Number of pages in the WC/UC/DMA pool (ulong)
	bit_test = 
	lines testing - 0 off; 1 report; 2 fail if stuck (int)
	brightness_switch_enabled = 
	 (bool)
	allow_duplicates = 
	 (bool)
	disable_backlight_sysfs_if = 
	 (int)
	report_key_events = 
	0: none, 1: output changes, 2: brightness changes, 3: all (int)
	hw_changes_brightness = 
	Set this to 1 on buggy hw which changes the brightness itself when a hotkey is pressed: -1: auto, 0: normal 1: hw-changes-brightness (int)
	device_id_scheme = 
	 (bool)
	only_lcd = 
	 (int)
	drm_dp_cec_unregister_delay = 
	CEC unregister delay in seconds, 0: no delay, >= 1000: never unregister (uint)
	fbdev_emulation = 
	Enable legacy fbdev emulation [default=true] (bool)
	drm_fbdev_overalloc = 
	Overallocation of the fbdev buffer (%) [default=100] (int)
	edid_firmware = 
	DEPRECATED. Use drm.edid_firmware module parameter instead. (charp)
	poll = 
	 (bool)
	dp_aux_i2c_speed_khz = 
	Assumed speed of the i2c bus in kHz, (1-400, default 10) (int)
	dp_aux_i2c_transfer_size = 
	Number of bytes to transfer in a single I2C over DP AUX CH message, (1-16, default 16) (int)
	ignore_oc = 
	ignore hardware overcurrent indications (bool)
	debug = 
	Debug level (int)
	debug = 
	debug level (0-2) (int)
	debug_phys_addr = 
	add CEC_CAP_PHYS_ADDR if set (bool)
	marvell_enable = 
	Marvell SATA via AHCI (1 = enabled) (int)
	mobile_lpm_policy = 
	Default LPM policy for mobile chipsets (int)
	skip_host_reset = 
	skip global host reset (0=don't skip, 1=skip) (int)
	ignore_sss = 
	Ignore staggered spinup flag (0=don't ignore, 1=ignore) (int)
	ahci_em_messages = 
	AHCI Enclosure Management Message control (0 = off, 1 = on) (bool)
	devslp_idle_timeout = 
	device sleep idle timeout (int)
	edid_firmware = 
	Do not probe monitor, use specified EDID blob from built-in data or /lib/firmware instead.  (string)
	vblankoffdelay = 
	Delay until vblank irq auto-disable [msecs] (0: never disable, <0: disable immediately) (int)
	timestamp_precision_usec = 
	Max. error on timestamps [usecs] (int)
	debug = 
	Enable debug output, where each bit enables a debug category.
			Bit 0 (0x01)  will enable CORE messages (drm core code)
			Bit 1 (0x02)  will enable DRIVER messages (drm controller code)
			Bit 2 (0x04)  will enable KMS messages (modesetting code)
			Bit 3 (0x08)  will enable PRIME messages (prime code)
			Bit 4 (0x10)  will enable ATOMIC messages (atomic code)
			Bit 5 (0x20)  will enable VBL messages (vblank code)
			Bit 7 (0x80)  will enable LEASE messages (leasing code)
			Bit 8 (0x100) will enable DP messages (displayport code) (int)
	edid_fixup = 
	Minimum number of valid EDID header bytes (0-8, default 6) (int)
	zpodd_poweroff_delay = 
	Poweroff delay for ZPODD in seconds (int)
	acpi_gtf_filter = 
	filter mask for ACPI _GTF commands, set to filter out (0x1=set xfermode, 0x2=lock/freeze lock, 0x4=DIPM, 0x8=FPDMA non-zero offset, 0x10=FPDMA DMA Setup FIS auto-activate) (int)
	force = 
	Force ATA configurations including cable type, link speed and transfer mode (see Documentation/admin-guide/kernel-parameters.rst for details) (string)
	atapi_enabled = 
	Enable discovery of ATAPI devices (0=off, 1=on [default]) (int)
	atapi_dmadir = 
	Enable ATAPI DMADIR bridge support (0=off [default], 1=on) (int)
	atapi_passthru16 = 
	Enable ATA_16 passthru for ATAPI devices (0=off, 1=on [default]) (int)
	fua = 
	FUA support (0=off [default], 1=on) (int)
	ignore_hpa = 
	Ignore HPA limit (0=keep BIOS limits, 1=ignore limits, using full disk) (int)
	dma = 
	DMA enable/disable (0x1==ATA, 0x2==ATAPI, 0x4==CF) (int)
	ata_probe_timeout = 
	Set ATA probing timeout (seconds) (int)
	noacpi = 
	Disable the use of ACPI in probe/suspend/resume (0=off [default], 1=on) (int)
	allow_tpm = 
	Permit the use of TPM commands (0=off [default], 1=on) (int)
	atapi_an = 
	Enable ATAPI AN media presence notification (0=0ff [default], 1=on) (int)

firewire_ohci - Driver for PCI OHCI IEEE1394 controllers	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)
	page_pool_size = 
	Number of pages in the WC/UC/DMA pool (ulong)
	bit_test = 
	lines testing - 0 off; 1 report; 2 fail if stuck (int)
	brightness_switch_enabled = 
	 (bool)
	allow_duplicates = 
	 (bool)
	disable_backlight_sysfs_if = 
	 (int)
	report_key_events = 
	0: none, 1: output changes, 2: brightness changes, 3: all (int)
	hw_changes_brightness = 
	Set this to 1 on buggy hw which changes the brightness itself when a hotkey is pressed: -1: auto, 0: normal 1: hw-changes-brightness (int)
	device_id_scheme = 
	 (bool)
	only_lcd = 
	 (int)
	drm_dp_cec_unregister_delay = 
	CEC unregister delay in seconds, 0: no delay, >= 1000: never unregister (uint)
	fbdev_emulation = 
	Enable legacy fbdev emulation [default=true] (bool)
	drm_fbdev_overalloc = 
	Overallocation of the fbdev buffer (%) [default=100] (int)
	edid_firmware = 
	DEPRECATED. Use drm.edid_firmware module parameter instead. (charp)
	poll = 
	 (bool)
	dp_aux_i2c_speed_khz = 
	Assumed speed of the i2c bus in kHz, (1-400, default 10) (int)
	dp_aux_i2c_transfer_size = 
	Number of bytes to transfer in a single I2C over DP AUX CH message, (1-16, default 16) (int)
	ignore_oc = 
	ignore hardware overcurrent indications (bool)
	debug = 
	Debug level (int)
	debug = 
	debug level (0-2) (int)
	debug_phys_addr = 
	add CEC_CAP_PHYS_ADDR if set (bool)
	marvell_enable = 
	Marvell SATA via AHCI (1 = enabled) (int)
	mobile_lpm_policy = 
	Default LPM policy for mobile chipsets (int)
	skip_host_reset = 
	skip global host reset (0=don't skip, 1=skip) (int)
	ignore_sss = 
	Ignore staggered spinup flag (0=don't ignore, 1=ignore) (int)
	ahci_em_messages = 
	AHCI Enclosure Management Message control (0 = off, 1 = on) (bool)
	devslp_idle_timeout = 
	device sleep idle timeout (int)
	edid_firmware = 
	Do not probe monitor, use specified EDID blob from built-in data or /lib/firmware instead.  (string)
	vblankoffdelay = 
	Delay until vblank irq auto-disable [msecs] (0: never disable, <0: disable immediately) (int)
	timestamp_precision_usec = 
	Max. error on timestamps [usecs] (int)
	debug = 
	Enable debug output, where each bit enables a debug category.
			Bit 0 (0x01)  will enable CORE messages (drm core code)
			Bit 1 (0x02)  will enable DRIVER messages (drm controller code)
			Bit 2 (0x04)  will enable KMS messages (modesetting code)
			Bit 3 (0x08)  will enable PRIME messages (prime code)
			Bit 4 (0x10)  will enable ATOMIC messages (atomic code)
			Bit 5 (0x20)  will enable VBL messages (vblank code)
			Bit 7 (0x80)  will enable LEASE messages (leasing code)
			Bit 8 (0x100) will enable DP messages (displayport code) (int)
	edid_fixup = 
	Minimum number of valid EDID header bytes (0-8, default 6) (int)
	zpodd_poweroff_delay = 
	Poweroff delay for ZPODD in seconds (int)
	acpi_gtf_filter = 
	filter mask for ACPI _GTF commands, set to filter out (0x1=set xfermode, 0x2=lock/freeze lock, 0x4=DIPM, 0x8=FPDMA non-zero offset, 0x10=FPDMA DMA Setup FIS auto-activate) (int)
	force = 
	Force ATA configurations including cable type, link speed and transfer mode (see Documentation/admin-guide/kernel-parameters.rst for details) (string)
	atapi_enabled = 
	Enable discovery of ATAPI devices (0=off, 1=on [default]) (int)
	atapi_dmadir = 
	Enable ATAPI DMADIR bridge support (0=off [default], 1=on) (int)
	atapi_passthru16 = 
	Enable ATA_16 passthru for ATAPI devices (0=off, 1=on [default]) (int)
	fua = 
	FUA support (0=off [default], 1=on) (int)
	ignore_hpa = 
	Ignore HPA limit (0=keep BIOS limits, 1=ignore limits, using full disk) (int)
	dma = 
	DMA enable/disable (0x1==ATA, 0x2==ATAPI, 0x4==CF) (int)
	ata_probe_timeout = 
	Set ATA probing timeout (seconds) (int)
	noacpi = 
	Disable the use of ACPI in probe/suspend/resume (0=off [default], 1=on) (int)
	allow_tpm = 
	Permit the use of TPM commands (0=off [default], 1=on) (int)
	atapi_an = 
	Enable ATAPI AN media presence notification (0=0ff [default], 1=on) (int)
	quirks = 
	Chip quirks (default = 0, nonatomic cycle timer = 0x1, reset packet generation = 0x2, AR/selfID endianness = 0x4, no 1394a enhancements = 0x8, disable MSI = 0x10, TI SLLZ059 erratum = 0x20, IR wake unreliable = 0x40) (int)
	debug = 
	Verbose logging (default = 0, AT/AR events = 1, self-IDs = 2, IRQs = 4, busReset events = 8, or a combination, or all = -1) (int)
	remote_dma = 
	Enable unfiltered remote DMA (default = N) (bool)

mptbase - Fusion MPT base driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)
	page_pool_size = 
	Number of pages in the WC/UC/DMA pool (ulong)
	bit_test = 
	lines testing - 0 off; 1 report; 2 fail if stuck (int)
	brightness_switch_enabled = 
	 (bool)
	allow_duplicates = 
	 (bool)
	disable_backlight_sysfs_if = 
	 (int)
	report_key_events = 
	0: none, 1: output changes, 2: brightness changes, 3: all (int)
	hw_changes_brightness = 
	Set this to 1 on buggy hw which changes the brightness itself when a hotkey is pressed: -1: auto, 0: normal 1: hw-changes-brightness (int)
	device_id_scheme = 
	 (bool)
	only_lcd = 
	 (int)
	drm_dp_cec_unregister_delay = 
	CEC unregister delay in seconds, 0: no delay, >= 1000: never unregister (uint)
	fbdev_emulation = 
	Enable legacy fbdev emulation [default=true] (bool)
	drm_fbdev_overalloc = 
	Overallocation of the fbdev buffer (%) [default=100] (int)
	edid_firmware = 
	DEPRECATED. Use drm.edid_firmware module parameter instead. (charp)
	poll = 
	 (bool)
	dp_aux_i2c_speed_khz = 
	Assumed speed of the i2c bus in kHz, (1-400, default 10) (int)
	dp_aux_i2c_transfer_size = 
	Number of bytes to transfer in a single I2C over DP AUX CH message, (1-16, default 16) (int)
	ignore_oc = 
	ignore hardware overcurrent indications (bool)
	debug = 
	Debug level (int)
	debug = 
	debug level (0-2) (int)
	debug_phys_addr = 
	add CEC_CAP_PHYS_ADDR if set (bool)
	marvell_enable = 
	Marvell SATA via AHCI (1 = enabled) (int)
	mobile_lpm_policy = 
	Default LPM policy for mobile chipsets (int)
	skip_host_reset = 
	skip global host reset (0=don't skip, 1=skip) (int)
	ignore_sss = 
	Ignore staggered spinup flag (0=don't ignore, 1=ignore) (int)
	ahci_em_messages = 
	AHCI Enclosure Management Message control (0 = off, 1 = on) (bool)
	devslp_idle_timeout = 
	device sleep idle timeout (int)
	edid_firmware = 
	Do not probe monitor, use specified EDID blob from built-in data or /lib/firmware instead.  (string)
	vblankoffdelay = 
	Delay until vblank irq auto-disable [msecs] (0: never disable, <0: disable immediately) (int)
	timestamp_precision_usec = 
	Max. error on timestamps [usecs] (int)
	debug = 
	Enable debug output, where each bit enables a debug category.
			Bit 0 (0x01)  will enable CORE messages (drm core code)
			Bit 1 (0x02)  will enable DRIVER messages (drm controller code)
			Bit 2 (0x04)  will enable KMS messages (modesetting code)
			Bit 3 (0x08)  will enable PRIME messages (prime code)
			Bit 4 (0x10)  will enable ATOMIC messages (atomic code)
			Bit 5 (0x20)  will enable VBL messages (vblank code)
			Bit 7 (0x80)  will enable LEASE messages (leasing code)
			Bit 8 (0x100) will enable DP messages (displayport code) (int)
	edid_fixup = 
	Minimum number of valid EDID header bytes (0-8, default 6) (int)
	zpodd_poweroff_delay = 
	Poweroff delay for ZPODD in seconds (int)
	acpi_gtf_filter = 
	filter mask for ACPI _GTF commands, set to filter out (0x1=set xfermode, 0x2=lock/freeze lock, 0x4=DIPM, 0x8=FPDMA non-zero offset, 0x10=FPDMA DMA Setup FIS auto-activate) (int)
	force = 
	Force ATA configurations including cable type, link speed and transfer mode (see Documentation/admin-guide/kernel-parameters.rst for details) (string)
	atapi_enabled = 
	Enable discovery of ATAPI devices (0=off, 1=on [default]) (int)
	atapi_dmadir = 
	Enable ATAPI DMADIR bridge support (0=off [default], 1=on) (int)
	atapi_passthru16 = 
	Enable ATA_16 passthru for ATAPI devices (0=off, 1=on [default]) (int)
	fua = 
	FUA support (0=off [default], 1=on) (int)
	ignore_hpa = 
	Ignore HPA limit (0=keep BIOS limits, 1=ignore limits, using full disk) (int)
	dma = 
	DMA enable/disable (0x1==ATA, 0x2==ATAPI, 0x4==CF) (int)
	ata_probe_timeout = 
	Set ATA probing timeout (seconds) (int)
	noacpi = 
	Disable the use of ACPI in probe/suspend/resume (0=off [default], 1=on) (int)
	allow_tpm = 
	Permit the use of TPM commands (0=off [default], 1=on) (int)
	atapi_an = 
	Enable ATAPI AN media presence notification (0=0ff [default], 1=on) (int)
	quirks = 
	Chip quirks (default = 0, nonatomic cycle timer = 0x1, reset packet generation = 0x2, AR/selfID endianness = 0x4, no 1394a enhancements = 0x8, disable MSI = 0x10, TI SLLZ059 erratum = 0x20, IR wake unreliable = 0x40) (int)
	debug = 
	Verbose logging (default = 0, AT/AR events = 1, self-IDs = 2, IRQs = 4, busReset events = 8, or a combination, or all = -1) (int)
	remote_dma = 
	Enable unfiltered remote DMA (default = N) (bool)
	mpt_msi_enable_spi = 
	 Enable MSI Support for SPI controllers (default=0) (int)
	mpt_msi_enable_fc = 
	 Enable MSI Support for FC controllers (default=0) (int)
	mpt_msi_enable_sas = 
	 Enable MSI Support for SAS controllers (default=0) (int)
	mpt_channel_mapping = 
	 Mapping id's to channels (default=0) (int)
	mpt_debug_level = 
	 debug level - refer to mptdebug.h - (default=0)
	mpt_fwfault_debug = 
	Enable detection of Firmware fault and halt Firmware on fault - (default=0) (int)

ehci_hcd - USB 2.0 'Enhanced' Host Controller (EHCI) Driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)
	page_pool_size = 
	Number of pages in the WC/UC/DMA pool (ulong)
	bit_test = 
	lines testing - 0 off; 1 report; 2 fail if stuck (int)
	brightness_switch_enabled = 
	 (bool)
	allow_duplicates = 
	 (bool)
	disable_backlight_sysfs_if = 
	 (int)
	report_key_events = 
	0: none, 1: output changes, 2: brightness changes, 3: all (int)
	hw_changes_brightness = 
	Set this to 1 on buggy hw which changes the brightness itself when a hotkey is pressed: -1: auto, 0: normal 1: hw-changes-brightness (int)
	device_id_scheme = 
	 (bool)
	only_lcd = 
	 (int)
	drm_dp_cec_unregister_delay = 
	CEC unregister delay in seconds, 0: no delay, >= 1000: never unregister (uint)
	fbdev_emulation = 
	Enable legacy fbdev emulation [default=true] (bool)
	drm_fbdev_overalloc = 
	Overallocation of the fbdev buffer (%) [default=100] (int)
	edid_firmware = 
	DEPRECATED. Use drm.edid_firmware module parameter instead. (charp)
	poll = 
	 (bool)
	dp_aux_i2c_speed_khz = 
	Assumed speed of the i2c bus in kHz, (1-400, default 10) (int)
	dp_aux_i2c_transfer_size = 
	Number of bytes to transfer in a single I2C over DP AUX CH message, (1-16, default 16) (int)
	ignore_oc = 
	ignore hardware overcurrent indications (bool)
	debug = 
	Debug level (int)
	debug = 
	debug level (0-2) (int)
	debug_phys_addr = 
	add CEC_CAP_PHYS_ADDR if set (bool)
	marvell_enable = 
	Marvell SATA via AHCI (1 = enabled) (int)
	mobile_lpm_policy = 
	Default LPM policy for mobile chipsets (int)
	skip_host_reset = 
	skip global host reset (0=don't skip, 1=skip) (int)
	ignore_sss = 
	Ignore staggered spinup flag (0=don't ignore, 1=ignore) (int)
	ahci_em_messages = 
	AHCI Enclosure Management Message control (0 = off, 1 = on) (bool)
	devslp_idle_timeout = 
	device sleep idle timeout (int)
	edid_firmware = 
	Do not probe monitor, use specified EDID blob from built-in data or /lib/firmware instead.  (string)
	vblankoffdelay = 
	Delay until vblank irq auto-disable [msecs] (0: never disable, <0: disable immediately) (int)
	timestamp_precision_usec = 
	Max. error on timestamps [usecs] (int)
	debug = 
	Enable debug output, where each bit enables a debug category.
			Bit 0 (0x01)  will enable CORE messages (drm core code)
			Bit 1 (0x02)  will enable DRIVER messages (drm controller code)
			Bit 2 (0x04)  will enable KMS messages (modesetting code)
			Bit 3 (0x08)  will enable PRIME messages (prime code)
			Bit 4 (0x10)  will enable ATOMIC messages (atomic code)
			Bit 5 (0x20)  will enable VBL messages (vblank code)
			Bit 7 (0x80)  will enable LEASE messages (leasing code)
			Bit 8 (0x100) will enable DP messages (displayport code) (int)
	edid_fixup = 
	Minimum number of valid EDID header bytes (0-8, default 6) (int)
	zpodd_poweroff_delay = 
	Poweroff delay for ZPODD in seconds (int)
	acpi_gtf_filter = 
	filter mask for ACPI _GTF commands, set to filter out (0x1=set xfermode, 0x2=lock/freeze lock, 0x4=DIPM, 0x8=FPDMA non-zero offset, 0x10=FPDMA DMA Setup FIS auto-activate) (int)
	force = 
	Force ATA configurations including cable type, link speed and transfer mode (see Documentation/admin-guide/kernel-parameters.rst for details) (string)
	atapi_enabled = 
	Enable discovery of ATAPI devices (0=off, 1=on [default]) (int)
	atapi_dmadir = 
	Enable ATAPI DMADIR bridge support (0=off [default], 1=on) (int)
	atapi_passthru16 = 
	Enable ATA_16 passthru for ATAPI devices (0=off, 1=on [default]) (int)
	fua = 
	FUA support (0=off [default], 1=on) (int)
	ignore_hpa = 
	Ignore HPA limit (0=keep BIOS limits, 1=ignore limits, using full disk) (int)
	dma = 
	DMA enable/disable (0x1==ATA, 0x2==ATAPI, 0x4==CF) (int)
	ata_probe_timeout = 
	Set ATA probing timeout (seconds) (int)
	noacpi = 
	Disable the use of ACPI in probe/suspend/resume (0=off [default], 1=on) (int)
	allow_tpm = 
	Permit the use of TPM commands (0=off [default], 1=on) (int)
	atapi_an = 
	Enable ATAPI AN media presence notification (0=0ff [default], 1=on) (int)
	quirks = 
	Chip quirks (default = 0, nonatomic cycle timer = 0x1, reset packet generation = 0x2, AR/selfID endianness = 0x4, no 1394a enhancements = 0x8, disable MSI = 0x10, TI SLLZ059 erratum = 0x20, IR wake unreliable = 0x40) (int)
	debug = 
	Verbose logging (default = 0, AT/AR events = 1, self-IDs = 2, IRQs = 4, busReset events = 8, or a combination, or all = -1) (int)
	remote_dma = 
	Enable unfiltered remote DMA (default = N) (bool)
	mpt_msi_enable_spi = 
	 Enable MSI Support for SPI controllers (default=0) (int)
	mpt_msi_enable_fc = 
	 Enable MSI Support for FC controllers (default=0) (int)
	mpt_msi_enable_sas = 
	 Enable MSI Support for SAS controllers (default=0) (int)
	mpt_channel_mapping = 
	 Mapping id's to channels (default=0) (int)
	mpt_debug_level = 
	 debug level - refer to mptdebug.h - (default=0)
	mpt_fwfault_debug = 
	Enable detection of Firmware fault and halt Firmware on fault - (default=0) (int)
	log2_irq_thresh = 
	log2 IRQ latency, 1-64 microframes (int)
	park = 
	park setting; 1-3 back-to-back async packets (uint)
	ignore_oc = 
	ignore bogus hardware overcurrent indications (bool)

scsi_mod - SCSI core	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)
	page_pool_size = 
	Number of pages in the WC/UC/DMA pool (ulong)
	bit_test = 
	lines testing - 0 off; 1 report; 2 fail if stuck (int)
	brightness_switch_enabled = 
	 (bool)
	allow_duplicates = 
	 (bool)
	disable_backlight_sysfs_if = 
	 (int)
	report_key_events = 
	0: none, 1: output changes, 2: brightness changes, 3: all (int)
	hw_changes_brightness = 
	Set this to 1 on buggy hw which changes the brightness itself when a hotkey is pressed: -1: auto, 0: normal 1: hw-changes-brightness (int)
	device_id_scheme = 
	 (bool)
	only_lcd = 
	 (int)
	drm_dp_cec_unregister_delay = 
	CEC unregister delay in seconds, 0: no delay, >= 1000: never unregister (uint)
	fbdev_emulation = 
	Enable legacy fbdev emulation [default=true] (bool)
	drm_fbdev_overalloc = 
	Overallocation of the fbdev buffer (%) [default=100] (int)
	edid_firmware = 
	DEPRECATED. Use drm.edid_firmware module parameter instead. (charp)
	poll = 
	 (bool)
	dp_aux_i2c_speed_khz = 
	Assumed speed of the i2c bus in kHz, (1-400, default 10) (int)
	dp_aux_i2c_transfer_size = 
	Number of bytes to transfer in a single I2C over DP AUX CH message, (1-16, default 16) (int)
	ignore_oc = 
	ignore hardware overcurrent indications (bool)
	debug = 
	Debug level (int)
	debug = 
	debug level (0-2) (int)
	debug_phys_addr = 
	add CEC_CAP_PHYS_ADDR if set (bool)
	marvell_enable = 
	Marvell SATA via AHCI (1 = enabled) (int)
	mobile_lpm_policy = 
	Default LPM policy for mobile chipsets (int)
	skip_host_reset = 
	skip global host reset (0=don't skip, 1=skip) (int)
	ignore_sss = 
	Ignore staggered spinup flag (0=don't ignore, 1=ignore) (int)
	ahci_em_messages = 
	AHCI Enclosure Management Message control (0 = off, 1 = on) (bool)
	devslp_idle_timeout = 
	device sleep idle timeout (int)
	edid_firmware = 
	Do not probe monitor, use specified EDID blob from built-in data or /lib/firmware instead.  (string)
	vblankoffdelay = 
	Delay until vblank irq auto-disable [msecs] (0: never disable, <0: disable immediately) (int)
	timestamp_precision_usec = 
	Max. error on timestamps [usecs] (int)
	debug = 
	Enable debug output, where each bit enables a debug category.
			Bit 0 (0x01)  will enable CORE messages (drm core code)
			Bit 1 (0x02)  will enable DRIVER messages (drm controller code)
			Bit 2 (0x04)  will enable KMS messages (modesetting code)
			Bit 3 (0x08)  will enable PRIME messages (prime code)
			Bit 4 (0x10)  will enable ATOMIC messages (atomic code)
			Bit 5 (0x20)  will enable VBL messages (vblank code)
			Bit 7 (0x80)  will enable LEASE messages (leasing code)
			Bit 8 (0x100) will enable DP messages (displayport code) (int)
	edid_fixup = 
	Minimum number of valid EDID header bytes (0-8, default 6) (int)
	zpodd_poweroff_delay = 
	Poweroff delay for ZPODD in seconds (int)
	acpi_gtf_filter = 
	filter mask for ACPI _GTF commands, set to filter out (0x1=set xfermode, 0x2=lock/freeze lock, 0x4=DIPM, 0x8=FPDMA non-zero offset, 0x10=FPDMA DMA Setup FIS auto-activate) (int)
	force = 
	Force ATA configurations including cable type, link speed and transfer mode (see Documentation/admin-guide/kernel-parameters.rst for details) (string)
	atapi_enabled = 
	Enable discovery of ATAPI devices (0=off, 1=on [default]) (int)
	atapi_dmadir = 
	Enable ATAPI DMADIR bridge support (0=off [default], 1=on) (int)
	atapi_passthru16 = 
	Enable ATA_16 passthru for ATAPI devices (0=off, 1=on [default]) (int)
	fua = 
	FUA support (0=off [default], 1=on) (int)
	ignore_hpa = 
	Ignore HPA limit (0=keep BIOS limits, 1=ignore limits, using full disk) (int)
	dma = 
	DMA enable/disable (0x1==ATA, 0x2==ATAPI, 0x4==CF) (int)
	ata_probe_timeout = 
	Set ATA probing timeout (seconds) (int)
	noacpi = 
	Disable the use of ACPI in probe/suspend/resume (0=off [default], 1=on) (int)
	allow_tpm = 
	Permit the use of TPM commands (0=off [default], 1=on) (int)
	atapi_an = 
	Enable ATAPI AN media presence notification (0=0ff [default], 1=on) (int)
	quirks = 
	Chip quirks (default = 0, nonatomic cycle timer = 0x1, reset packet generation = 0x2, AR/selfID endianness = 0x4, no 1394a enhancements = 0x8, disable MSI = 0x10, TI SLLZ059 erratum = 0x20, IR wake unreliable = 0x40) (int)
	debug = 
	Verbose logging (default = 0, AT/AR events = 1, self-IDs = 2, IRQs = 4, busReset events = 8, or a combination, or all = -1) (int)
	remote_dma = 
	Enable unfiltered remote DMA (default = N) (bool)
	mpt_msi_enable_spi = 
	 Enable MSI Support for SPI controllers (default=0) (int)
	mpt_msi_enable_fc = 
	 Enable MSI Support for FC controllers (default=0) (int)
	mpt_msi_enable_sas = 
	 Enable MSI Support for SAS controllers (default=0) (int)
	mpt_channel_mapping = 
	 Mapping id's to channels (default=0) (int)
	mpt_debug_level = 
	 debug level - refer to mptdebug.h - (default=0)
	mpt_fwfault_debug = 
	Enable detection of Firmware fault and halt Firmware on fault - (default=0) (int)
	log2_irq_thresh = 
	log2 IRQ latency, 1-64 microframes (int)
	park = 
	park setting; 1-3 back-to-back async packets (uint)
	ignore_oc = 
	ignore bogus hardware overcurrent indications (bool)
	dev_flags = 
	Given scsi_dev_flags=vendor:model:flags[,v:m:f] add black/white list entries for vendor and model with an integer value of flags to the scsi device info list (string)
	default_dev_flags = 
	scsi default device flag uint64_t value (ullong)
	max_luns = 
	last scsi LUN (should be between 1 and 2^64-1) (ullong)
	scan = 
	sync, async, manual, or none. Setting to 'manual' disables automatic scanning, but allows for manual device scan via the 'scan' sysfs attribute. (string)
	inq_timeout = 
	Timeout (in seconds) waiting for devices to answer INQUIRY. Default is 20. Some devices may need more; most need less. (uint)
	eh_deadline = 
	SCSI EH timeout in seconds (should be between 0 and 2^31-1) (int)
	scsi_logging_level = 
	a bit mask of logging levels (int)

usbcore - 
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)
	page_pool_size = 
	Number of pages in the WC/UC/DMA pool (ulong)
	bit_test = 
	lines testing - 0 off; 1 report; 2 fail if stuck (int)
	brightness_switch_enabled = 
	 (bool)
	allow_duplicates = 
	 (bool)
	disable_backlight_sysfs_if = 
	 (int)
	report_key_events = 
	0: none, 1: output changes, 2: brightness changes, 3: all (int)
	hw_changes_brightness = 
	Set this to 1 on buggy hw which changes the brightness itself when a hotkey is pressed: -1: auto, 0: normal 1: hw-changes-brightness (int)
	device_id_scheme = 
	 (bool)
	only_lcd = 
	 (int)
	drm_dp_cec_unregister_delay = 
	CEC unregister delay in seconds, 0: no delay, >= 1000: never unregister (uint)
	fbdev_emulation = 
	Enable legacy fbdev emulation [default=true] (bool)
	drm_fbdev_overalloc = 
	Overallocation of the fbdev buffer (%) [default=100] (int)
	edid_firmware = 
	DEPRECATED. Use drm.edid_firmware module parameter instead. (charp)
	poll = 
	 (bool)
	dp_aux_i2c_speed_khz = 
	Assumed speed of the i2c bus in kHz, (1-400, default 10) (int)
	dp_aux_i2c_transfer_size = 
	Number of bytes to transfer in a single I2C over DP AUX CH message, (1-16, default 16) (int)
	ignore_oc = 
	ignore hardware overcurrent indications (bool)
	debug = 
	Debug level (int)
	debug = 
	debug level (0-2) (int)
	debug_phys_addr = 
	add CEC_CAP_PHYS_ADDR if set (bool)
	marvell_enable = 
	Marvell SATA via AHCI (1 = enabled) (int)
	mobile_lpm_policy = 
	Default LPM policy for mobile chipsets (int)
	skip_host_reset = 
	skip global host reset (0=don't skip, 1=skip) (int)
	ignore_sss = 
	Ignore staggered spinup flag (0=don't ignore, 1=ignore) (int)
	ahci_em_messages = 
	AHCI Enclosure Management Message control (0 = off, 1 = on) (bool)
	devslp_idle_timeout = 
	device sleep idle timeout (int)
	edid_firmware = 
	Do not probe monitor, use specified EDID blob from built-in data or /lib/firmware instead.  (string)
	vblankoffdelay = 
	Delay until vblank irq auto-disable [msecs] (0: never disable, <0: disable immediately) (int)
	timestamp_precision_usec = 
	Max. error on timestamps [usecs] (int)
	debug = 
	Enable debug output, where each bit enables a debug category.
			Bit 0 (0x01)  will enable CORE messages (drm core code)
			Bit 1 (0x02)  will enable DRIVER messages (drm controller code)
			Bit 2 (0x04)  will enable KMS messages (modesetting code)
			Bit 3 (0x08)  will enable PRIME messages (prime code)
			Bit 4 (0x10)  will enable ATOMIC messages (atomic code)
			Bit 5 (0x20)  will enable VBL messages (vblank code)
			Bit 7 (0x80)  will enable LEASE messages (leasing code)
			Bit 8 (0x100) will enable DP messages (displayport code) (int)
	edid_fixup = 
	Minimum number of valid EDID header bytes (0-8, default 6) (int)
	zpodd_poweroff_delay = 
	Poweroff delay for ZPODD in seconds (int)
	acpi_gtf_filter = 
	filter mask for ACPI _GTF commands, set to filter out (0x1=set xfermode, 0x2=lock/freeze lock, 0x4=DIPM, 0x8=FPDMA non-zero offset, 0x10=FPDMA DMA Setup FIS auto-activate) (int)
	force = 
	Force ATA configurations including cable type, link speed and transfer mode (see Documentation/admin-guide/kernel-parameters.rst for details) (string)
	atapi_enabled = 
	Enable discovery of ATAPI devices (0=off, 1=on [default]) (int)
	atapi_dmadir = 
	Enable ATAPI DMADIR bridge support (0=off [default], 1=on) (int)
	atapi_passthru16 = 
	Enable ATA_16 passthru for ATAPI devices (0=off, 1=on [default]) (int)
	fua = 
	FUA support (0=off [default], 1=on) (int)
	ignore_hpa = 
	Ignore HPA limit (0=keep BIOS limits, 1=ignore limits, using full disk) (int)
	dma = 
	DMA enable/disable (0x1==ATA, 0x2==ATAPI, 0x4==CF) (int)
	ata_probe_timeout = 
	Set ATA probing timeout (seconds) (int)
	noacpi = 
	Disable the use of ACPI in probe/suspend/resume (0=off [default], 1=on) (int)
	allow_tpm = 
	Permit the use of TPM commands (0=off [default], 1=on) (int)
	atapi_an = 
	Enable ATAPI AN media presence notification (0=0ff [default], 1=on) (int)
	quirks = 
	Chip quirks (default = 0, nonatomic cycle timer = 0x1, reset packet generation = 0x2, AR/selfID endianness = 0x4, no 1394a enhancements = 0x8, disable MSI = 0x10, TI SLLZ059 erratum = 0x20, IR wake unreliable = 0x40) (int)
	debug = 
	Verbose logging (default = 0, AT/AR events = 1, self-IDs = 2, IRQs = 4, busReset events = 8, or a combination, or all = -1) (int)
	remote_dma = 
	Enable unfiltered remote DMA (default = N) (bool)
	mpt_msi_enable_spi = 
	 Enable MSI Support for SPI controllers (default=0) (int)
	mpt_msi_enable_fc = 
	 Enable MSI Support for FC controllers (default=0) (int)
	mpt_msi_enable_sas = 
	 Enable MSI Support for SAS controllers (default=0) (int)
	mpt_channel_mapping = 
	 Mapping id's to channels (default=0) (int)
	mpt_debug_level = 
	 debug level - refer to mptdebug.h - (default=0)
	mpt_fwfault_debug = 
	Enable detection of Firmware fault and halt Firmware on fault - (default=0) (int)
	log2_irq_thresh = 
	log2 IRQ latency, 1-64 microframes (int)
	park = 
	park setting; 1-3 back-to-back async packets (uint)
	ignore_oc = 
	ignore bogus hardware overcurrent indications (bool)
	dev_flags = 
	Given scsi_dev_flags=vendor:model:flags[,v:m:f] add black/white list entries for vendor and model with an integer value of flags to the scsi device info list (string)
	default_dev_flags = 
	scsi default device flag uint64_t value (ullong)
	max_luns = 
	last scsi LUN (should be between 1 and 2^64-1) (ullong)
	scan = 
	sync, async, manual, or none. Setting to 'manual' disables automatic scanning, but allows for manual device scan via the 'scan' sysfs attribute. (string)
	inq_timeout = 
	Timeout (in seconds) waiting for devices to answer INQUIRY. Default is 20. Some devices may need more; most need less. (uint)
	eh_deadline = 
	SCSI EH timeout in seconds (should be between 0 and 2^31-1) (int)
	scsi_logging_level = 
	a bit mask of logging levels (int)
	quirks = 
	Add/modify USB quirks by specifying quirks=vendorID:productID:quirks
	usbfs_snoop = 
	true to log all usbfs traffic (bool)
	usbfs_snoop_max = 
	maximum number of bytes to print while snooping (uint)
	usbfs_memory_mb = 
	maximum MB allowed for usbfs buffers (0 = no limit) (uint)
	authorized_default = 
	Default USB device authorization: 0 is not authorized, 1 is authorized, 2 is authorized for internal devices, -1 is authorized except for wireless USB (default, old behaviour) (int)
	blinkenlights = 
	true to cycle leds on hubs (bool)
	initial_descriptor_timeout = 
	initial 64-byte descriptor request timeout in milliseconds (default 5000 - 5.0 seconds) (int)
	old_scheme_first = 
	start with the old device initialization scheme (bool)
	use_both_schemes = 
	try the other device initialization scheme if the first one fails (bool)
	nousb = 
	 (bool)
	autosuspend = 
	default autosuspend delay (int)

wmi - ACPI-WMI Mapping Driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)
	page_pool_size = 
	Number of pages in the WC/UC/DMA pool (ulong)
	bit_test = 
	lines testing - 0 off; 1 report; 2 fail if stuck (int)
	brightness_switch_enabled = 
	 (bool)
	allow_duplicates = 
	 (bool)
	disable_backlight_sysfs_if = 
	 (int)
	report_key_events = 
	0: none, 1: output changes, 2: brightness changes, 3: all (int)
	hw_changes_brightness = 
	Set this to 1 on buggy hw which changes the brightness itself when a hotkey is pressed: -1: auto, 0: normal 1: hw-changes-brightness (int)
	device_id_scheme = 
	 (bool)
	only_lcd = 
	 (int)
	drm_dp_cec_unregister_delay = 
	CEC unregister delay in seconds, 0: no delay, >= 1000: never unregister (uint)
	fbdev_emulation = 
	Enable legacy fbdev emulation [default=true] (bool)
	drm_fbdev_overalloc = 
	Overallocation of the fbdev buffer (%) [default=100] (int)
	edid_firmware = 
	DEPRECATED. Use drm.edid_firmware module parameter instead. (charp)
	poll = 
	 (bool)
	dp_aux_i2c_speed_khz = 
	Assumed speed of the i2c bus in kHz, (1-400, default 10) (int)
	dp_aux_i2c_transfer_size = 
	Number of bytes to transfer in a single I2C over DP AUX CH message, (1-16, default 16) (int)
	ignore_oc = 
	ignore hardware overcurrent indications (bool)
	debug = 
	Debug level (int)
	debug = 
	debug level (0-2) (int)
	debug_phys_addr = 
	add CEC_CAP_PHYS_ADDR if set (bool)
	marvell_enable = 
	Marvell SATA via AHCI (1 = enabled) (int)
	mobile_lpm_policy = 
	Default LPM policy for mobile chipsets (int)
	skip_host_reset = 
	skip global host reset (0=don't skip, 1=skip) (int)
	ignore_sss = 
	Ignore staggered spinup flag (0=don't ignore, 1=ignore) (int)
	ahci_em_messages = 
	AHCI Enclosure Management Message control (0 = off, 1 = on) (bool)
	devslp_idle_timeout = 
	device sleep idle timeout (int)
	edid_firmware = 
	Do not probe monitor, use specified EDID blob from built-in data or /lib/firmware instead.  (string)
	vblankoffdelay = 
	Delay until vblank irq auto-disable [msecs] (0: never disable, <0: disable immediately) (int)
	timestamp_precision_usec = 
	Max. error on timestamps [usecs] (int)
	debug = 
	Enable debug output, where each bit enables a debug category.
			Bit 0 (0x01)  will enable CORE messages (drm core code)
			Bit 1 (0x02)  will enable DRIVER messages (drm controller code)
			Bit 2 (0x04)  will enable KMS messages (modesetting code)
			Bit 3 (0x08)  will enable PRIME messages (prime code)
			Bit 4 (0x10)  will enable ATOMIC messages (atomic code)
			Bit 5 (0x20)  will enable VBL messages (vblank code)
			Bit 7 (0x80)  will enable LEASE messages (leasing code)
			Bit 8 (0x100) will enable DP messages (displayport code) (int)
	edid_fixup = 
	Minimum number of valid EDID header bytes (0-8, default 6) (int)
	zpodd_poweroff_delay = 
	Poweroff delay for ZPODD in seconds (int)
	acpi_gtf_filter = 
	filter mask for ACPI _GTF commands, set to filter out (0x1=set xfermode, 0x2=lock/freeze lock, 0x4=DIPM, 0x8=FPDMA non-zero offset, 0x10=FPDMA DMA Setup FIS auto-activate) (int)
	force = 
	Force ATA configurations including cable type, link speed and transfer mode (see Documentation/admin-guide/kernel-parameters.rst for details) (string)
	atapi_enabled = 
	Enable discovery of ATAPI devices (0=off, 1=on [default]) (int)
	atapi_dmadir = 
	Enable ATAPI DMADIR bridge support (0=off [default], 1=on) (int)
	atapi_passthru16 = 
	Enable ATA_16 passthru for ATAPI devices (0=off, 1=on [default]) (int)
	fua = 
	FUA support (0=off [default], 1=on) (int)
	ignore_hpa = 
	Ignore HPA limit (0=keep BIOS limits, 1=ignore limits, using full disk) (int)
	dma = 
	DMA enable/disable (0x1==ATA, 0x2==ATAPI, 0x4==CF) (int)
	ata_probe_timeout = 
	Set ATA probing timeout (seconds) (int)
	noacpi = 
	Disable the use of ACPI in probe/suspend/resume (0=off [default], 1=on) (int)
	allow_tpm = 
	Permit the use of TPM commands (0=off [default], 1=on) (int)
	atapi_an = 
	Enable ATAPI AN media presence notification (0=0ff [default], 1=on) (int)
	quirks = 
	Chip quirks (default = 0, nonatomic cycle timer = 0x1, reset packet generation = 0x2, AR/selfID endianness = 0x4, no 1394a enhancements = 0x8, disable MSI = 0x10, TI SLLZ059 erratum = 0x20, IR wake unreliable = 0x40) (int)
	debug = 
	Verbose logging (default = 0, AT/AR events = 1, self-IDs = 2, IRQs = 4, busReset events = 8, or a combination, or all = -1) (int)
	remote_dma = 
	Enable unfiltered remote DMA (default = N) (bool)
	mpt_msi_enable_spi = 
	 Enable MSI Support for SPI controllers (default=0) (int)
	mpt_msi_enable_fc = 
	 Enable MSI Support for FC controllers (default=0) (int)
	mpt_msi_enable_sas = 
	 Enable MSI Support for SAS controllers (default=0) (int)
	mpt_channel_mapping = 
	 Mapping id's to channels (default=0) (int)
	mpt_debug_level = 
	 debug level - refer to mptdebug.h - (default=0)
	mpt_fwfault_debug = 
	Enable detection of Firmware fault and halt Firmware on fault - (default=0) (int)
	log2_irq_thresh = 
	log2 IRQ latency, 1-64 microframes (int)
	park = 
	park setting; 1-3 back-to-back async packets (uint)
	ignore_oc = 
	ignore bogus hardware overcurrent indications (bool)
	dev_flags = 
	Given scsi_dev_flags=vendor:model:flags[,v:m:f] add black/white list entries for vendor and model with an integer value of flags to the scsi device info list (string)
	default_dev_flags = 
	scsi default device flag uint64_t value (ullong)
	max_luns = 
	last scsi LUN (should be between 1 and 2^64-1) (ullong)
	scan = 
	sync, async, manual, or none. Setting to 'manual' disables automatic scanning, but allows for manual device scan via the 'scan' sysfs attribute. (string)
	inq_timeout = 
	Timeout (in seconds) waiting for devices to answer INQUIRY. Default is 20. Some devices may need more; most need less. (uint)
	eh_deadline = 
	SCSI EH timeout in seconds (should be between 0 and 2^31-1) (int)
	scsi_logging_level = 
	a bit mask of logging levels (int)
	quirks = 
	Add/modify USB quirks by specifying quirks=vendorID:productID:quirks
	usbfs_snoop = 
	true to log all usbfs traffic (bool)
	usbfs_snoop_max = 
	maximum number of bytes to print while snooping (uint)
	usbfs_memory_mb = 
	maximum MB allowed for usbfs buffers (0 = no limit) (uint)
	authorized_default = 
	Default USB device authorization: 0 is not authorized, 1 is authorized, 2 is authorized for internal devices, -1 is authorized except for wireless USB (default, old behaviour) (int)
	blinkenlights = 
	true to cycle leds on hubs (bool)
	initial_descriptor_timeout = 
	initial 64-byte descriptor request timeout in milliseconds (default 5000 - 5.0 seconds) (int)
	old_scheme_first = 
	start with the old device initialization scheme (bool)
	use_both_schemes = 
	try the other device initialization scheme if the first one fails (bool)
	nousb = 
	 (bool)
	autosuspend = 
	default autosuspend delay (int)
	debug_event = 
	Log WMI Events [0/1] (bool)
	debug_dump_wdg = 
	Dump available WMI interfaces [0/1] (bool)

button - ACPI Button Driver	
	check_copy_up = 
	Obsolete; does nothing
	redirect_max = 
	Maximum length of absolute redirect xattr value (ushort)
	redirect_dir = 
	Default to on or off for the redirect_dir feature (bool)
	redirect_always_follow = 
	Follow redirects even if redirect_dir feature is turned off (bool)
	index = 
	Default to on or off for the inodes index feature (bool)
	nfs_export = 
	Default to on or off for the NFS export feature (bool)
	xino_auto = 
	Auto enable xino feature (bool)
	metacopy = 
	Default to on or off for the metadata only copy up feature (bool)
	bss_entries_limit = 
	limit to number of scan BSS entries (per wiphy, default 1000) (int)
	ieee80211_regdom = 
	IEEE 802.11 regulatory domain code (charp)
	cfg80211_disable_40mhz_24ghz = 
	Disable 40MHz support in the 2.4GHz band (bool)
	garp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_join_time = 
	Join time in ms (default 200ms) (uint)
	mrp_periodic_time = 
	Periodic time in ms (default 1s) (uint)
	tstamp = 
	Enable connection tracking flow timestamping. (bool)
	acct = 
	Enable connection tracking flow accounting. (bool)
	nf_conntrack_helper = 
	Enable automatic conntrack helper assignment (default 0) (bool)
	expect_hashsize = 
	 (uint)
	enable_hooks = 
	Always enable conntrack hooks (bool)
	duration = 
	forced idle time for each attempt in msec.
	window_size = 
	sliding window in number of clamping cycles
		powerclamp controls idle ratio within this window. larger
		window size results in slower response time but more smooth
		clamping results. default to 2.
	tjmax = 
	TjMax value in degrees Celsius (int)
	gpiobase = 
	The GPIO number base. -1 means dynamic, which is the default. (int)
	static_hdmi_pcm = 
	Don't restrict PCM parameters per ELD info (bool)
	enable_acomp = 
	Enable audio component binding (default=yes) (bool)
	enable_silent_stream = 
	Enable Silent Stream for HDMI devices (bool)
	enable_shadow_vmcs = 
	 (bool)
	nested_early_check = 
	 (bool)
	vpid = 
	 (bool)
	vnmi = 
	 (bool)
	flexpriority = 
	 (bool)
	ept = 
	 (bool)
	unrestricted_guest = 
	 (bool)
	eptad = 
	 (bool)
	emulate_invalid_guest_state = 
	 (bool)
	fasteoi = 
	 (bool)
	enable_apicv = 
	 (bool)
	nested = 
	 (bool)
	pml = 
	 (bool)
	dump_invalid_vmcs = 
	 (bool)
	preemption_timer = 
	 (bool)
	allow_smaller_maxphyaddr = 
	 (bool)
	ple_gap = 
	 (uint)
	ple_window = 
	 (uint)
	ple_window_grow = 
	 (uint)
	ple_window_shrink = 
	 (uint)
	ple_window_max = 
	 (uint)
	pt_mode = 
	 (int)
	enlightened_vmcs = 
	 (bool)
	index = 
	Index value for Intel HD audio interface. (array of int)
	id = 
	ID string for Intel HD audio interface. (array of charp)
	enable = 
	Enable Intel HD audio interface. (array of bool)
	model = 
	Use the given board model. (array of charp)
	position_fix = 
	DMA pointer read method.(-1 = system default, 0 = auto, 1 = LPIB, 2 = POSBUF, 3 = VIACOMBO, 4 = COMBO, 5 = SKL+, 6 = FIFO). (array of int)
	bdl_pos_adj = 
	BDL position adjustment offset. (array of int)
	probe_mask = 
	Bitmask to probe codecs (default = -1). (array of int)
	probe_only = 
	Only probing and no codec initialization. (array of int)
	jackpoll_ms = 
	Ms between polling for jack events (default = 0, using unsol events only) (array of int)
	single_cmd = 
	Use single command to communicate with codecs (for debugging only). (bint)
	enable_msi = 
	Enable Message Signaled Interrupt (MSI) (bint)
	patch = 
	Patch file for Intel HD audio interface. (array of charp)
	beep_mode = 
	Select HDA Beep registration mode (0=off, 1=on) (default=1). (array of bool)
	dmic_detect = 
	Allow DSP driver selection (bypass this driver) (0=off, 1=on) (default=1); deprecated, use snd-intel-dspcfg.dsp_driver option instead (bool)
	power_save = 
	Automatic power-saving timeout (in second, 0 = disable). (xint)
	pm_blacklist = 
	Enable power-management denylist (bool)
	power_save_controller = 
	Reset controller in power save mode. (bool)
	align_buffer_size = 
	Force buffer and period sizes to be multiple of 128 bytes. (bint)
	snoop = 
	Enable/disable snooping (bint)
	dsp_driver = 
	Force the DSP driver for Intel DSP (0=auto, 1=legacy, 2=SST, 3=SOF) (int)
	sdw_link_mask = 
	Intel link mask (one bit per link) (int)
	tdp_mmu = 
	 (bool)
	nx_huge_pages = 
	 (bool)
	nx_huge_pages_recovery_ratio = 
	 (uint)
	flush_on_reuse = 
	 (bool)
	ignore_msrs = 
	 (bool)
	report_ignored_msrs = 
	 (bool)
	min_timer_period_us = 
	 (uint)
	kvmclock_periodic_sync = 
	 (bool)
	tsc_tolerance_ppm = 
	 (uint)
	lapic_timer_advance_ns = 
	 (int)
	vector_hashing = 
	 (bool)
	enable_vmware_backdoor = 
	 (bool)
	force_emulation_prefix = 
	 (bool)
	pi_inject_timer = 
	 (bint)
	halt_poll_ns = 
	 (uint)
	halt_poll_ns_grow = 
	 (uint)
	halt_poll_ns_grow_start = 
	 (uint)
	halt_poll_ns_shrink = 
	 (uint)
	dump_coef = 
	Dump processing coefficients in codec proc file (-1=auto, 0=disable, 1=enable) (int)
	enable_tablet_mode_sw = 
	Enable SW_TABLET_MODE reporting (-1=auto, 0=no, 1=yes) (int)
	elantech_smbus = 
	Use a secondary bus for the Elantech device. (int)
	synaptics_intertouch = 
	Use a secondary bus for the Synaptics device. (int)
	proto = 
	Highest protocol extension to probe (bare, imps, exps, any). Useful for KVM switches. (proto_abbrev)
	resolution = 
	Resolution, in dpi. (uint)
	rate = 
	Report rate, in reports per second. (uint)
	smartscroll = 
	Logitech Smartscroll autorepeat, 1 = enabled (default), 0 = disabled. (bool)
	a4tech_workaround = 
	A4Tech second scroll wheel workaround, 1 = enabled, 0 = disabled (default). (bool)
	resetafter = 
	Reset device after so many bad packets (0 = never). (uint)
	resync_time = 
	How long can mouse stay idle before forcing resync (in seconds, 0 = never). (uint)
	interrupts = 
	Enable interrupts (int)
	itpm = 
	Force iTPM workarounds (found on some Lenovo laptops) (bool)
	force = 
	Force device probe rather than using ACPI entry (bool)
	hid = 
	Set additional specific HID for this driver to probe (string)
	preallocate_dma = 
	Preallocate DMA memory when the PCM devices are initialized. (int)
	maximum_substreams = 
	Maximum substreams with preallocated DMA memory. (int)
	max_alloc_per_card = 
	Max total allocation bytes per card. (ulong)
	suspend_pcr = 
	PCR to use for dummy writes to facilitate flush on suspend. (uint)
	use_pci_fixup = 
	Enable PCI fixup to seek for hidden devices (int)
	edac_op_state = 
	EDAC Error Reporting state: 0=Poll,1=NMI (int)
	current_quality = 
	current hwrng entropy estimation per 1024 bits of input (ushort)
	default_quality = 
	default entropy content of hwrng per 1024 bits of input (ushort)
	power_signal = 
	Power button sends this signal to init (int)
	acpi_pstate_strict = 
	value 0 or non-zero. non-zero -> strict ACPI checks are performed during frequency changes. (uint)
	scatter_elem_sz = 
	scatter gather element size (default: max(SG_SCATTER_SZ, PAGE_SIZE)) (int)
	def_reserved_size = 
	size of buffer reserved for each fd (int)
	allow_dio = 
	allow direct I/O (default: 0 (disallow)) (int)
	seq_client_load = 
	The numbers of global (system) clients to load through kmod. (array of int)
	seq_default_timer_class = 
	The default timer class. (int)
	seq_default_timer_sclass = 
	The default timer slave class. (int)
	seq_default_timer_card = 
	The default timer card number. (int)
	seq_default_timer_device = 
	The default timer device number. (int)
	seq_default_timer_subdevice = 
	The default timer subdevice number. (int)
	seq_default_timer_resolution = 
	The default timer resolution in Hz. (int)
	timer_limit = 
	Maximum global timers in system. (int)
	timer_tstamp_monotonic = 
	Use posix monotonic clock source for timestamps (default). (int)
	slots = 
	Module names assigned to the slots. (array of charp)
	major = 
	Major # for sound driver. (int)
	cards_limit = 
	Count of auto-loadable soundcards. (int)
	preclaim_oss = 
	 (int)
	experimental_zcopytx = 
	Enable Zero Copy TX; 1 -Enable; 0 - Disable (int)
	max_mem_regions = 
	Maximum number of memory regions in memory map. (default: 64) (ushort)
	max_iotlb_entries = 
	Maximum number of iotlb entries. (default: 2048) (int)
	amp = 
	Create AMP controller device (bool)
	disable_esco = 
	Disable eSCO connection creation (bool)
	disable_ertm = 
	Disable enhanced retransmission mode (bool)
	enable_ecred = 
	Enable enhanced credit flow control mode (bool)
	master_switch_mode = 
	SW_RFKILL_ALL ON should: 0=do nothing (only unlock); 1=restore; 2=unblock all (uint)
	default_state = 
	Default initial state for all radio types, 0 = radio off (uint)
	allow_unsafe_interrupts = 
	Enable VFIO IOMMU support for on platforms without interrupt remapping support. (bool)
	disable_hugepages = 
	Disable VFIO IOMMU support for IOMMU hugepages. (bool)
	dma_entry_limit = 
	Maximum number of user DMA mappings per container (65535). (uint)
	enable_unsafe_noiommu_mode = 
	Enable UNSAFE, no-IOMMU mode.  This mode provides no device isolation, no DMA translation, no host kernel protection, cannot be used for device assignment to virtual machines, requires RAWIO permissions, and will taint the kernel.  If you do not know what this is for, step away. (default: false) (bool)
	reserved_rq_based_ios = 
	Reserved IOs in request-based mempools (uint)
	use_blk_mq = 
	Use block multiqueue for request-based DM devices (bool)
	dm_mq_nr_hw_queues = 
	Number of hardware queues for request-based dm-mq devices (uint)
	dm_mq_queue_depth = 
	Queue depth for request-based dm-mq devices (uint)
	stats_current_allocated_bytes = 
	Memory currently used by statistics (ulong)
	kcopyd_subjob_size_kb = 
	Sub-job size for dm-kcopyd clients (uint)
	major = 
	The major number of the device mapper (uint)
	reserved_bio_based_ios = 
	Reserved IOs in bio-based mempools (uint)
	dm_numa_node = 
	NUMA node for DM device memory allocations (int)
	swap_bios = 
	Maximum allowed inflight swap IOs (int)
	mp_protocol_compress = 
	compress protocol id in multilink fragments (bool)
	max_loop = 
	Maximum number of loop devices (int)
	max_part = 
	Maximum number of partitions per loop device (int)
	max_user_bgreq = 
	Global limit for the maximum number of backgrounded requests an unprivileged user can set (uint)
	max_user_congthresh = 
	Global limit for the maximum congestion threshold an unprivileged user can set (uint)
	zvol_inhibit_dev = 
	Do not create zvol device nodes (uint)
	zvol_major = 
	Major number for zvol device (uint)
	zvol_threads = 
	Max number of threads to handle I/O requests (uint)
	zvol_request_sync = 
	Synchronously handle bio requests (uint)
	zvol_max_discard_blocks = 
	Max number of blocks to discard (ulong)
	zvol_prefetch_bytes = 
	Prefetch N bytes at zvol start+end (uint)
	zvol_volmode = 
	Default volmode property value (uint)
	zfs_fallocate_reserve_percent = 
	Percentage of length to use for the available capacity check (uint)
	zfs_key_max_salt_uses = 
	Max number of times a salt value can be used for generating encryption keys before it is rotated (ulong)
	zfs_object_mutex_size = 
	Size of znode hold array (uint)
	zfs_unlink_suspend_progress = 
	Set to prevent async unlinks (debug - leaks space into the unlinked set) (int)
	zfs_delete_blocks = 
	Delete files larger than N blocks async (ulong)
	zfs_dbgmsg_enable = 
	Enable ZFS debug message log (int)
	zfs_dbgmsg_maxsize = 
	Maximum ZFS debug log size (int)
	zfs_admin_snapshot = 
	Enable mkdir/rmdir/mv in .zfs/snapshot (int)
	zfs_expire_snapshot = 
	Seconds to expire .zfs/snapshot (int)
	vdev_file_logical_ashift = 
	Logical ashift for file-based devices (ulong)
	vdev_file_physical_ashift = 
	Physical ashift for file-based devices (ulong)
	zfs_vdev_scheduler = 
	I/O scheduler
	zfs_arc_shrinker_limit = 
	Limit on number of pages that ARC shrinker can reclaim at once (int)
	zfs_abd_scatter_enabled = 
	Toggle whether ABD allocations must be linear. (int)
	zfs_abd_scatter_min_size = 
	Minimum size of scatter allocations. (int)
	zfs_abd_scatter_max_order = 
	Maximum order allocation used for a scatter ABD. (uint)
	zio_slow_io_ms = 
	Max I/O completion time (milliseconds) before marking it as slow (int)
	zio_requeue_io_start_cut_in_line = 
	Prioritize requeued I/O (int)
	zfs_sync_pass_deferred_free = 
	Defer frees starting in this pass (int)
	zfs_sync_pass_dont_compress = 
	Don't compress starting in this pass (int)
	zfs_sync_pass_rewrite = 
	Rewrite new bps starting in this pass (int)
	zio_dva_throttle_enabled = 
	Throttle block allocations in the ZIO pipeline (int)
	zio_deadman_log_all = 
	Log all slow ZIOs, not just those with vdevs (int)
	zfs_commit_timeout_pct = 
	ZIL block open timeout percentage (int)
	zil_replay_disable = 
	Disable intent logging replay (int)
	zil_nocacheflush = 
	Disable ZIL cache flushes (int)
	zil_slog_bulk = 
	Limit in bytes slog sync writes per commit (ulong)
	zil_maxblocksize = 
	Limit in bytes of ZIL log block size (int)
	zfs_vnops_read_chunk_size = 
	Bytes to read per chunk (ulong)
	zfs_immediate_write_sz = 
	Largest data block to write to zil (long)
	zfs_max_nvlist_src_size = 
	Maximum size in bytes allowed for src nvlist passed with ZFS ioctls (ulong)
	zfs_history_output_max = 
	Maximum size in bytes of ZFS ioctl output that will be logged (ulong)
	zfs_zevent_retain_max = 
	Maximum recent zevents records to retain for duplicate checking (uint)
	zfs_zevent_retain_expire_secs = 
	Expiration time for recent zevents records (uint)
	zfs_lua_max_instrlimit = 
	Max instruction limit that can be specified for a channel program (ulong)
	zfs_lua_max_memlimit = 
	Max memory limit that can be specified for a channel program (ulong)
	zap_iterate_prefetch = 
	When iterating ZAP object, prefetch it (int)
	zfs_trim_extent_bytes_max = 
	Max size of TRIM commands, larger will be split (uint)
	zfs_trim_extent_bytes_min = 
	Min size of TRIM commands, smaller will be skipped (uint)
	zfs_trim_metaslab_skip = 
	Skip metaslabs which have never been initialized (uint)
	zfs_trim_txg_batch = 
	Min number of txgs to aggregate frees before issuing TRIM (uint)
	zfs_trim_queue_limit = 
	Max queued TRIMs outstanding per leaf vdev (uint)
	zfs_removal_ignore_errors = 
	Ignore hard IO errors when removing device (int)
	zfs_remove_max_segment = 
	Largest contiguous segment to allocate when removing device (int)
	vdev_removal_max_span = 
	Largest span of free chunks a remap segment can span (int)
	zfs_removal_suspend_progress = 
	Pause device removal after this many bytes are copied (debug use only - causes removal to hang) (int)
	zfs_rebuild_max_segment = 
	Max segment size in bytes of rebuild reads (ulong)
	zfs_vdev_raidz_impl = 
	Select raidz implementation.
	zfs_vdev_aggregation_limit = 
	Max vdev I/O aggregation size (int)
	zfs_vdev_aggregation_limit_non_rotating = 
	Max vdev I/O aggregation size for non-rotating media (int)
	zfs_vdev_aggregate_trim = 
	Allow TRIM I/O to be aggregated (int)
	zfs_vdev_read_gap_limit = 
	Aggregate read I/O over gap (int)
	zfs_vdev_write_gap_limit = 
	Aggregate write I/O over gap (int)
	zfs_vdev_max_active = 
	Maximum number of active I/Os per vdev (int)
	zfs_vdev_async_write_active_max_dirty_percent = 
	Async write concurrency max threshold (int)
	zfs_vdev_async_write_active_min_dirty_percent = 
	Async write concurrency min threshold (int)
	zfs_vdev_async_read_max_active = 
	Max active async read I/Os per vdev (int)
	zfs_vdev_async_read_min_active = 
	Min active async read I/Os per vdev (int)
	zfs_vdev_async_write_max_active = 
	Max active async write I/Os per vdev (int)
	zfs_vdev_async_write_min_active = 
	Min active async write I/Os per vdev (int)
	zfs_vdev_initializing_max_active = 
	Max active initializing I/Os per vdev (int)
	zfs_vdev_initializing_min_active = 
	Min active initializing I/Os per vdev (int)
	zfs_vdev_removal_max_active = 
	Max active removal I/Os per vdev (int)
	zfs_vdev_removal_min_active = 
	Min active removal I/Os per vdev (int)
	zfs_vdev_scrub_max_active = 
	Max active scrub I/Os per vdev (int)
	zfs_vdev_scrub_min_active = 
	Min active scrub I/Os per vdev (int)
	zfs_vdev_sync_read_max_active = 
	Max active sync read I/Os per vdev (int)
	zfs_vdev_sync_read_min_active = 
	Min active sync read I/Os per vdev (int)
	zfs_vdev_sync_write_max_active = 
	Max active sync write I/Os per vdev (int)
	zfs_vdev_sync_write_min_active = 
	Min active sync write I/Os per vdev (int)
	zfs_vdev_trim_max_active = 
	Max active trim/discard I/Os per vdev (int)
	zfs_vdev_trim_min_active = 
	Min active trim/discard I/Os per vdev (int)
	zfs_vdev_rebuild_max_active = 
	Max active rebuild I/Os per vdev (int)
	zfs_vdev_rebuild_min_active = 
	Min active rebuild I/Os per vdev (int)
	zfs_vdev_nia_credit = 
	Number of non-interactive I/Os to allow in sequence (int)
	zfs_vdev_nia_delay = 
	Number of non-interactive I/Os before _max_active (int)
	zfs_vdev_queue_depth_pct = 
	Queue depth percentage for each top-level vdev (int)
	zfs_vdev_mirror_rotating_inc = 
	Rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_inc = 
	Rotating media load increment for seeking I/O's (int)
	zfs_vdev_mirror_rotating_seek_offset = 
	Offset in bytes from the last I/O which triggers a reduced rotating media seek increment (int)
	zfs_vdev_mirror_non_rotating_inc = 
	Non-rotating media load increment for non-seeking I/O's (int)
	zfs_vdev_mirror_non_rotating_seek_inc = 
	Non-rotating media load increment for seeking I/O's (int)
	zfs_initialize_value = 
	Value written during zpool initialize (ulong)
	zfs_initialize_chunk_size = 
	Size in bytes of writes by zpool initialize (ulong)
	zfs_condense_indirect_vdevs_enable = 
	Whether to attempt condensing indirect vdev mappings (int)
	zfs_condense_indirect_obsolete_pct = 
	Minimum obsolete percent of bytes in the mapping to attempt condensing (int)
	zfs_condense_min_mapping_bytes = 
	Don't bother condensing if the mapping uses less than this amount of memory (ulong)
	zfs_condense_max_obsolete_bytes = 
	Minimum size obsolete spacemap to attempt condensing (ulong)
	zfs_condense_indirect_commit_entry_delay_ms = 
	Used by tests to ensure certain actions happen in the middle of a condense. A maximum value of 1 should be sufficient. (int)
	zfs_reconstruct_indirect_combinations_max = 
	Maximum number of combinations when reconstructing split segments (int)
	zfs_vdev_cache_max = 
	Inflate reads small than max (int)
	zfs_vdev_cache_size = 
	Total size of the per-disk cache (int)
	zfs_vdev_cache_bshift = 
	Shift size to inflate reads too (int)
	zfs_vdev_default_ms_count = 
	Target number of metaslabs per top-level vdev (int)
	zfs_vdev_default_ms_shift = 
	Default limit for metaslab size (int)
	zfs_vdev_min_ms_count = 
	Minimum number of metaslabs per top-level vdev (int)
	zfs_vdev_ms_count_limit = 
	Practical upper limit of total metaslabs per top-level vdev (int)
	zfs_slow_io_events_per_second = 
	Rate limit slow IO (delay) events to this many per second (uint)
	zfs_checksum_events_per_second = 
	Rate limit checksum events to this many checksum errors per second (do not set below zed threshold). (uint)
	zfs_scan_ignore_errors = 
	Ignore errors during resilver/scrub (int)
	vdev_validate_skip = 
	Bypass vdev_validate() (int)
	zfs_nocacheflush = 
	Disable cache flushes (int)
	zfs_vdev_min_auto_ashift = 
	Minimum ashift used when creating new top-level vdevs
	zfs_vdev_max_auto_ashift = 
	Maximum ashift used when optimizing for logical -> physical sector size on new top-level vdevs
	zfs_txg_timeout = 
	Max seconds worth of delta per txg (int)
	zfs_read_history = 
	Historical statistics for the last N reads (int)
	zfs_read_history_hits = 
	Include cache hits in read history (int)
	zfs_txg_history = 
	Historical statistics for the last N txgs (int)
	zfs_multihost_history = 
	Historical statistics for last N multihost writes (int)
	zfs_flags = 
	Set additional debugging flags (uint)
	zfs_recover = 
	Set to attempt to recover from fatal errors (int)
	zfs_free_leak_on_eio = 
	Set to ignore IO errors during free and permanently leak the space (int)
	zfs_deadman_checktime_ms = 
	Dead I/O check interval in milliseconds (ulong)
	zfs_deadman_enabled = 
	Enable deadman timer (int)
	spa_asize_inflation = 
	SPA size estimate multiplication factor (int)
	zfs_ddt_data_is_special = 
	Place DDT data into the special class (int)
	zfs_user_indirect_is_special = 
	Place user data indirect blocks into the special class (int)
	zfs_deadman_failmode = 
	Failmode for deadman timer
	zfs_deadman_synctime_ms = 
	Pool sync expiration time in milliseconds
	zfs_deadman_ziotime_ms = 
	IO expiration time in milliseconds
	zfs_special_class_metadata_reserve_pct = 
	Small file blocks in special vdevs depends on this much free space available (int)
	spa_slop_shift = 
	Reserved free space in pool
	zfs_unflushed_max_mem_amt = 
	Specific hard-limit in memory that ZFS allows to be used for unflushed changes (ulong)
	zfs_unflushed_max_mem_ppm = 
	Percentage of the overall system memory that ZFS allows to be used for unflushed changes (value is calculated over 1000000 for finer granularity (ulong)
	zfs_unflushed_log_block_max = 
	Hard limit (upper-bound) in the size of the space map log in terms of blocks. (ulong)
	zfs_unflushed_log_block_min = 
	Lower-bound limit for the maximum amount of blocks allowed in log spacemap (see zfs_unflushed_log_block_max) (ulong)
	zfs_unflushed_log_block_pct = 
	Tunable used to determine the number of blocks that can be used for the spacemap log, expressed as a percentage of the total number of metaslabs in the pool (e.g. 400 means the number of log blocks is capped at 4 times the number of metaslabs) (ulong)
	zfs_max_log_walking = 
	The number of past TXGs that the flushing algorithm of the log spacemap feature uses to estimate incoming log blocks (ulong)
	zfs_max_logsm_summary_length = 
	Maximum number of rows allowed in the summary of the spacemap log (ulong)
	zfs_min_metaslabs_to_flush = 
	Minimum number of metaslabs to flush per dirty TXG (ulong)
	zfs_keep_log_spacemaps_at_export = 
	Prevent the log spacemaps from being flushed and destroyed during pool export/destroy (int)
	spa_config_path = 
	SPA config file (/etc/zfs/zpool.cache) (charp)
	zfs_autoimport_disable = 
	Disable pool import at module load (int)
	zfs_spa_discard_memory_limit = 
	Limit for memory used in prefetching the checkpoint space map done on each vdev while discarding the checkpoint (ulong)
	spa_load_verify_shift = 
	log2(fraction of arc that can be used by inflight I/Os when verifying pool during import (int)
	spa_load_verify_metadata = 
	Set to traverse metadata on pool import (int)
	spa_load_verify_data = 
	Set to traverse data on pool import (int)
	spa_load_print_vdev_tree = 
	Print vdev tree to zfs_dbgmsg during pool import (int)
	zio_taskq_batch_pct = 
	Percentage of CPUs to run an IO worker thread (uint)
	zfs_max_missing_tvds = 
	Allow importing pool with up to this number of missing top-level vdevs (in read-only mode) (ulong)
	zfs_livelist_condense_zthr_pause = 
	Set the livelist condense zthr to pause (int)
	zfs_livelist_condense_sync_pause = 
	Set the livelist condense synctask to pause (int)
	zfs_livelist_condense_sync_cancel = 
	Whether livelist condensing was canceled in the synctask (int)
	zfs_livelist_condense_zthr_cancel = 
	Whether livelist condensing was canceled in the zthr function (int)
	zfs_livelist_condense_new_alloc = 
	Whether extra ALLOC blkptrs were added to a livelist entry while it was being condensed (int)
	zfs_multilist_num_sublists = 
	Number of sublists used in each multilist (int)
	zfs_multihost_interval = 
	Milliseconds between mmp writes to each leaf
	zfs_multihost_fail_intervals = 
	Max allowed period without a successful mmp write (uint)
	zfs_multihost_import_intervals = 
	Number of zfs_multihost_interval periods to wait for activity (uint)
	metaslab_aliquot = 
	Allocation granularity (a.k.a. stripe size) (ulong)
	metaslab_debug_load = 
	Load all metaslabs when pool is first opened (int)
	metaslab_debug_unload = 
	Prevent metaslabs from being unloaded (int)
	metaslab_preload_enabled = 
	Preload potential metaslabs during reassessment (int)
	metaslab_unload_delay = 
	Delay in txgs after metaslab was last used before unloading (int)
	metaslab_unload_delay_ms = 
	Delay in milliseconds after metaslab was last used before unloading (int)
	zfs_mg_noalloc_threshold = 
	Percentage of metaslab group size that should be free to make it eligible for allocation (int)
	zfs_mg_fragmentation_threshold = 
	Percentage of metaslab group size that should be considered eligible for allocations unless all metaslab groups within the metaslab class have also crossed this threshold (int)
	zfs_metaslab_fragmentation_threshold = 
	Fragmentation for metaslab to allow allocation (int)
	metaslab_fragmentation_factor_enabled = 
	Use the fragmentation metric to prefer less fragmented metaslabs (int)
	metaslab_lba_weighting_enabled = 
	Prefer metaslabs with lower LBAs (int)
	metaslab_bias_enabled = 
	Enable metaslab group biasing (int)
	zfs_metaslab_segment_weight_enabled = 
	Enable segment-based metaslab selection (int)
	zfs_metaslab_switch_threshold = 
	Segment-based metaslab selection maximum buckets before switching (int)
	metaslab_force_ganging = 
	Blocks larger than this size are forced to be gang blocks (ulong)
	metaslab_df_max_search = 
	Max distance (bytes) to search forward before using size tree (int)
	metaslab_df_use_largest_segment = 
	When looking in size tree, use largest segment instead of exact fit (int)
	zfs_metaslab_max_size_cache_sec = 
	How long to trust the cached max chunk size of a metaslab (ulong)
	zfs_metaslab_mem_limit = 
	Percentage of memory that can be used to store metaslab range trees (int)
	zfs_zevent_len_max = 
	Max event queue length (int)
	zfs_zevent_cols = 
	Max event column width (int)
	zfs_zevent_console = 
	Log events to the console (int)
	zfs_scan_vdev_limit = 
	Max bytes in flight per leaf vdev for scrubs and resilvers (ulong)
	zfs_scrub_min_time_ms = 
	Min millisecs to scrub per txg (int)
	zfs_obsolete_min_time_ms = 
	Min millisecs to obsolete per txg (int)
	zfs_free_min_time_ms = 
	Min millisecs to free per txg (int)
	zfs_resilver_min_time_ms = 
	Min millisecs to resilver per txg (int)
	zfs_scan_suspend_progress = 
	Set to prevent scans from progressing (int)
	zfs_no_scrub_io = 
	Set to disable scrub I/O (int)
	zfs_no_scrub_prefetch = 
	Set to disable scrub prefetching (int)
	zfs_async_block_max_blocks = 
	Max number of blocks freed in one txg (ulong)
	zfs_max_async_dedup_frees = 
	Max number of dedup blocks freed in one txg (ulong)
	zfs_free_bpobj_enabled = 
	Enable processing of the free_bpobj (int)
	zfs_scan_mem_lim_fact = 
	Fraction of RAM for scan hard limit (int)
	zfs_scan_issue_strategy = 
	IO issuing strategy during scrubbing. 0 = default, 1 = LBA, 2 = size (int)
	zfs_scan_legacy = 
	Scrub using legacy non-sequential method (int)
	zfs_scan_checkpoint_intval = 
	Scan progress on-disk checkpointing interval (int)
	zfs_scan_max_ext_gap = 
	Max gap in bytes between sequential scrub / resilver I/Os (ulong)
	zfs_scan_mem_lim_soft_fact = 
	Fraction of hard limit used as soft limit (int)
	zfs_scan_strict_mem_lim = 
	Tunable to attempt to reduce lock contention (int)
	zfs_scan_fill_weight = 
	Tunable to adjust bias towards more filled segments during scans (int)
	zfs_resilver_disable_defer = 
	Process all resilvers immediately (int)
	zfs_dirty_data_max_percent = 
	Max percent of RAM allowed to be dirty (int)
	zfs_dirty_data_max_max_percent = 
	zfs_dirty_data_max upper bound as % of RAM (int)
	zfs_delay_min_dirty_percent = 
	Transaction delay threshold (int)
	zfs_dirty_data_max = 
	Determines the dirty space limit (ulong)
	zfs_dirty_data_max_max = 
	zfs_dirty_data_max upper bound in bytes (ulong)
	zfs_dirty_data_sync_percent = 
	Dirty data txg sync threshold as a percentage of zfs_dirty_data_max (int)
	zfs_delay_scale = 
	How quickly delay approaches infinity (ulong)
	zfs_sync_taskq_batch_pct = 
	Max percent of CPUs that are used to sync dirty data (int)
	zfs_zil_clean_taskq_nthr_pct = 
	Max percent of CPUs that are used per dp_sync_taskq (int)
	zfs_zil_clean_taskq_minalloc = 
	Number of taskq entries that are pre-populated (int)
	zfs_zil_clean_taskq_maxalloc = 
	Max number of taskq entries that are cached (int)
	zfs_livelist_max_entries = 
	Size to start the next sub-livelist in a livelist (ulong)
	zfs_livelist_min_percent_shared = 
	Threshold at which livelist is disabled (int)
	zfs_max_recordsize = 
	Max allowed record size (int)
	zfs_allow_redacted_dataset_mount = 
	Allow mounting of redacted datasets (int)
	zfs_disable_ivset_guid_check = 
	Set to allow raw receives without IVset guids (int)
	zfs_prefetch_disable = 
	Disable all ZFS prefetching (int)
	zfetch_max_streams = 
	Max number of streams per zfetch (uint)
	zfetch_min_sec_reap = 
	Min time before stream reclaim (uint)
	zfetch_max_distance = 
	Max bytes to prefetch per stream (uint)
	zfetch_max_idistance = 
	Max bytes to prefetch indirects for per stream (uint)
	zfetch_array_rd_sz = 
	Number of bytes in a array_read (ulong)
	zfs_pd_bytes_max = 
	Max number of bytes to prefetch (int)
	ignore_hole_birth = 
	Alias for send_holes_without_birth_time (int)
	send_holes_without_birth_time = 
	Ignore hole_birth txg for zfs send (int)
	zfs_send_corrupt_data = 
	Allow sending corrupt data (int)
	zfs_send_queue_length = 
	Maximum send queue length (int)
	zfs_send_unmodified_spill_blocks = 
	Send unmodified spill blocks (int)
	zfs_send_no_prefetch_queue_length = 
	Maximum send queue length for non-prefetch queues (int)
	zfs_send_queue_ff = 
	Send queue fill fraction (int)
	zfs_send_no_prefetch_queue_ff = 
	Send queue fill fraction for non-prefetch queues (int)
	zfs_override_estimate_recordsize = 
	Override block size estimate with fixed size (int)
	zfs_recv_queue_length = 
	Maximum receive queue length (int)
	zfs_recv_queue_ff = 
	Receive queue fill fraction (int)
	zfs_recv_write_batch_size = 
	Maximum amount of writes to batch into one transaction (int)
	dmu_object_alloc_chunk_shift = 
	CPU-specific allocator grabs 2^N objects at once (int)
	zfs_nopwrite_enabled = 
	Enable NOP writes (int)
	zfs_per_txg_dirty_frees_percent = 
	Percentage of dirtied blocks from frees in one TXG (ulong)
	zfs_dmu_offset_next_sync = 
	Enable forcing txg sync to find holes (int)
	dmu_prefetch_max = 
	Limit one prefetch call to this size (int)
	zfs_dedup_prefetch = 
	Enable prefetching dedup-ed blks (int)
	zfs_dbuf_state_index = 
	Calculate arc header index (int)
	dbuf_cache_max_bytes = 
	Maximum size in bytes of the dbuf cache. (ulong)
	dbuf_cache_hiwater_pct = 
	Percentage over dbuf_cache_max_bytes when dbufs must be evicted directly. (uint)
	dbuf_cache_lowater_pct = 
	Percentage below dbuf_cache_max_bytes when the evict thread stops evicting dbufs. (uint)
	dbuf_metadata_cache_max_bytes = 
	Maximum size in bytes of the dbuf metadata cache. (ulong)
	dbuf_cache_shift = 
	Set the size of the dbuf cache to a log2 fraction of arc size. (int)
	dbuf_metadata_cache_shift = 
	Set the size of the dbuf metadata cache to a log2 fraction of arc size. (int)
	zfs_arc_min = 
	Min arc size
	zfs_arc_max = 
	Max arc size
	zfs_arc_meta_limit = 
	Metadata limit for arc size
	zfs_arc_meta_limit_percent = 
	Percent of arc size for arc meta limit
	zfs_arc_meta_min = 
	Min arc metadata
	zfs_arc_meta_prune = 
	Meta objects to scan for prune (int)
	zfs_arc_meta_adjust_restarts = 
	Limit number of restarts in arc_evict_meta (int)
	zfs_arc_meta_strategy = 
	Meta reclaim strategy (int)
	zfs_arc_grow_retry = 
	Seconds before growing arc size
	zfs_arc_p_dampener_disable = 
	Disable arc_p adapt dampener (int)
	zfs_arc_shrink_shift = 
	log2(fraction of arc to reclaim)
	zfs_arc_pc_percent = 
	Percent of pagecache to reclaim arc to (uint)
	zfs_arc_p_min_shift = 
	arc_c shift to calc min/max arc_p
	zfs_arc_average_blocksize = 
	Target average block size (int)
	zfs_compressed_arc_enabled = 
	Disable compressed arc buffers (int)
	zfs_arc_min_prefetch_ms = 
	Min life of prefetch block in ms
	zfs_arc_min_prescient_prefetch_ms = 
	Min life of prescient prefetched block in ms
	l2arc_write_max = 
	Max write bytes per interval (ulong)
	l2arc_write_boost = 
	Extra write bytes during device warmup (ulong)
	l2arc_headroom = 
	Number of max device writes to precache (ulong)
	l2arc_headroom_boost = 
	Compressed l2arc_headroom multiplier (ulong)
	l2arc_trim_ahead = 
	TRIM ahead L2ARC write size multiplier (ulong)
	l2arc_feed_secs = 
	Seconds between L2ARC writing (ulong)
	l2arc_feed_min_ms = 
	Min feed interval in milliseconds (ulong)
	l2arc_noprefetch = 
	Skip caching prefetched buffers (int)
	l2arc_feed_again = 
	Turbo L2ARC warmup (int)
	l2arc_norw = 
	No reads during writes (int)
	l2arc_meta_percent = 
	Percent of ARC size allowed for L2ARC-only headers (int)
	l2arc_rebuild_enabled = 
	Rebuild the L2ARC when importing a pool (int)
	l2arc_rebuild_blocks_min_l2size = 
	Min size in bytes to write rebuild log blocks in L2ARC (ulong)
	l2arc_mfuonly = 
	Cache only MFU data from ARC into L2ARC (int)
	zfs_arc_lotsfree_percent = 
	System free memory I/O throttle in bytes
	zfs_arc_sys_free = 
	System free memory target size in bytes
	zfs_arc_dnode_limit = 
	Minimum bytes of dnodes in arc
	zfs_arc_dnode_limit_percent = 
	Percent of ARC meta buffers for dnodes
	zfs_arc_dnode_reduce_percent = 
	Percentage of excess dnodes to try to unpin (ulong)
	zfs_arc_eviction_pct = 
	When full, ARC allocation waits for eviction of this % of alloc size (int)
	zfs_arc_evict_batch_limit = 
	The number of headers to evict per sublist before moving to the next (int)
	icp_aes_impl = 
	Select aes implementation.
	icp_gcm_impl = 
	Select gcm implementation.
	icp_gcm_avx_chunk_size = 
	How many bytes to process while owning the FPU
	zfs_max_dataset_nesting = 
	Limit to the amount of nesting a path can have. Defaults to 50. (int)
	zfs_fletcher_4_impl = 
	Select fletcher 4 implementation.
	spl_taskq_thread_bind = 
	Bind taskq thread to CPU by default (int)
	spl_taskq_thread_dynamic = 
	Allow dynamic taskq threads (int)
	spl_taskq_thread_priority = 
	Allow non-default priority for taskq threads (int)
	spl_taskq_thread_sequential = 
	Create new taskq threads after N sequential tasks (int)
	spl_taskq_kick = 
	Write nonzero to kick stuck taskqs to spawn more threads
	spl_max_show_tasks = 
	Max number of tasks shown in taskq proc (uint)
	spl_kmem_cache_magazine_size = 
	Default magazine size (2-256), set automatically (0) (uint)
	spl_kmem_cache_reclaim = 
	Single reclaim pass (0x1) (uint)
	spl_kmem_cache_obj_per_slab = 
	Number of objects per slab (uint)
	spl_kmem_cache_max_size = 
	Maximum size of slab in MB (uint)
	spl_kmem_cache_slab_limit = 
	Objects less than N bytes use the Linux slab (uint)
	spl_kmem_cache_kmem_threads = 
	Number of spl_kmem_cache threads (uint)
	spl_kmem_alloc_warn = 
	Warning threshold in bytes for a kmem_alloc() (uint)
	spl_kmem_alloc_max = 
	Maximum size in bytes for a kmem_alloc() (uint)
	spl_hostid = 
	The system hostid. (ulong)
	spl_hostid_path = 
	The system hostid file (/etc/hostid) (charp)
	spl_panic_halt = 
	Cause kernel panic on assertion failures (uint)
	spl_schedule_hrtimeout_slack_us = 
	schedule_hrtimeout_range() delta/slack value in us, default(0)
	mousepoll = 
	Polling interval of mice (uint)
	jspoll = 
	Polling interval of joysticks (uint)
	kbpoll = 
	Polling interval of keyboards (uint)
	ignoreled = 
	Autosuspend with active leds (uint)
	quirks = 
	Add/modify USB HID quirks by specifying  quirks=vendorID:productID:quirks where vendorID, productID, and quirks are all in 0x-prefixed hex (array of charp)
	debug = 
	toggle HID debugging messages (int)
	ignore_special_drivers = 
	Ignore any special drivers and handle all devices by generic driver (int)
	xa_test = 
	 (int)
	option_zero_cd = 
	ZeroCD mode (1=Force Modem (default), 2=Allow CD-Rom (uint)
	swi_tru_install = 
	TRU-Install mode (1=Full Logic (def), 2=Force CD-Rom, 3=Force Modem) (uint)
	delay_use = 
	seconds to delay before using a new device (uint)
	quirks = 
	supplemental list of device IDs and their quirks (string)
	vram_pushbuf = 
	Create DMA push buffers in VRAM (int)
	kms_vram_pushbuf = 
	Place EVO/NVD push buffers in VRAM (default: auto) (int)
	tv_norm = 
	Default TV norm.
			Supported: PAL, PAL-M, PAL-N, PAL-Nc, NTSC-M, NTSC-J,
				hd480i, hd480p, hd576i, hd576p, hd720p, hd1080i.
			Default: PAL
			*NOTE* Ignored for cards with external TV encoders. (charp)
	nofbaccel = 
	Disable fbcon acceleration (int)
	fbcon_bpp = 
	fbcon bits-per-pixel (default: auto) (int)
	mst = 
	Enable DisplayPort multi-stream (default: enabled) (int)
	tv_disable = 
	Disable TV-out detection (int)
	ignorelid = 
	Ignore ACPI lid status (int)
	duallink = 
	Allow dual-link TMDS (default: enabled) (int)
	hdmimhz = 
	Force a maximum HDMI pixel clock (in MHz) (int)
	config = 
	option string to pass to driver core (charp)
	debug = 
	debug string to pass to driver core (charp)
	noaccel = 
	disable kernel/abi16 acceleration (int)
	modeset = 
	enable driver (default: auto, 0 = disabled, 1 = enabled, 2 = headless) (int)
	atomic = 
	Expose atomic ioctl (default: disabled) (int)
	runpm = 
	disable (0), force enable (1), optimus only default (-1) (int)
	page_pool_size = 
	Number of pages in the WC/UC/DMA pool (ulong)
	bit_test = 
	lines testing - 0 off; 1 report; 2 fail if stuck (int)
	brightness_switch_enabled = 
	 (bool)
	allow_duplicates = 
	 (bool)
	disable_backlight_sysfs_if = 
	 (int)
	report_key_events = 
	0: none, 1: output changes, 2: brightness changes, 3: all (int)
	hw_changes_brightness = 
	Set this to 1 on buggy hw which changes the brightness itself when a hotkey is pressed: -1: auto, 0: normal 1: hw-changes-brightness (int)
	device_id_scheme = 
	 (bool)
	only_lcd = 
	 (int)
	drm_dp_cec_unregister_delay = 
	CEC unregister delay in seconds, 0: no delay, >= 1000: never unregister (uint)
	fbdev_emulation = 
	Enable legacy fbdev emulation [default=true] (bool)
	drm_fbdev_overalloc = 
	Overallocation of the fbdev buffer (%) [default=100] (int)
	edid_firmware = 
	DEPRECATED. Use drm.edid_firmware module parameter instead. (charp)
	poll = 
	 (bool)
	dp_aux_i2c_speed_khz = 
	Assumed speed of the i2c bus in kHz, (1-400, default 10) (int)
	dp_aux_i2c_transfer_size = 
	Number of bytes to transfer in a single I2C over DP AUX CH message, (1-16, default 16) (int)
	ignore_oc = 
	ignore hardware overcurrent indications (bool)
	debug = 
	Debug level (int)
	debug = 
	debug level (0-2) (int)
	debug_phys_addr = 
	add CEC_CAP_PHYS_ADDR if set (bool)
	marvell_enable = 
	Marvell SATA via AHCI (1 = enabled) (int)
	mobile_lpm_policy = 
	Default LPM policy for mobile chipsets (int)
	skip_host_reset = 
	skip global host reset (0=don't skip, 1=skip) (int)
	ignore_sss = 
	Ignore staggered spinup flag (0=don't ignore, 1=ignore) (int)
	ahci_em_messages = 
	AHCI Enclosure Management Message control (0 = off, 1 = on) (bool)
	devslp_idle_timeout = 
	device sleep idle timeout (int)
	edid_firmware = 
	Do not probe monitor, use specified EDID blob from built-in data or /lib/firmware instead.  (string)
	vblankoffdelay = 
	Delay until vblank irq auto-disable [msecs] (0: never disable, <0: disable immediately) (int)
	timestamp_precision_usec = 
	Max. error on timestamps [usecs] (int)
	debug = 
	Enable debug output, where each bit enables a debug category.
			Bit 0 (0x01)  will enable CORE messages (drm core code)
			Bit 1 (0x02)  will enable DRIVER messages (drm controller code)
			Bit 2 (0x04)  will enable KMS messages (modesetting code)
			Bit 3 (0x08)  will enable PRIME messages (prime code)
			Bit 4 (0x10)  will enable ATOMIC messages (atomic code)
			Bit 5 (0x20)  will enable VBL messages (vblank code)
			Bit 7 (0x80)  will enable LEASE messages (leasing code)
			Bit 8 (0x100) will enable DP messages (displayport code) (int)
	edid_fixup = 
	Minimum number of valid EDID header bytes (0-8, default 6) (int)
	zpodd_poweroff_delay = 
	Poweroff delay for ZPODD in seconds (int)
	acpi_gtf_filter = 
	filter mask for ACPI _GTF commands, set to filter out (0x1=set xfermode, 0x2=lock/freeze lock, 0x4=DIPM, 0x8=FPDMA non-zero offset, 0x10=FPDMA DMA Setup FIS auto-activate) (int)
	force = 
	Force ATA configurations including cable type, link speed and transfer mode (see Documentation/admin-guide/kernel-parameters.rst for details) (string)
	atapi_enabled = 
	Enable discovery of ATAPI devices (0=off, 1=on [default]) (int)
	atapi_dmadir = 
	Enable ATAPI DMADIR bridge support (0=off [default], 1=on) (int)
	atapi_passthru16 = 
	Enable ATA_16 passthru for ATAPI devices (0=off, 1=on [default]) (int)
	fua = 
	FUA support (0=off [default], 1=on) (int)
	ignore_hpa = 
	Ignore HPA limit (0=keep BIOS limits, 1=ignore limits, using full disk) (int)
	dma = 
	DMA enable/disable (0x1==ATA, 0x2==ATAPI, 0x4==CF) (int)
	ata_probe_timeout = 
	Set ATA probing timeout (seconds) (int)
	noacpi = 
	Disable the use of ACPI in probe/suspend/resume (0=off [default], 1=on) (int)
	allow_tpm = 
	Permit the use of TPM commands (0=off [default], 1=on) (int)
	atapi_an = 
	Enable ATAPI AN media presence notification (0=0ff [default], 1=on) (int)
	quirks = 
	Chip quirks (default = 0, nonatomic cycle timer = 0x1, reset packet generation = 0x2, AR/selfID endianness = 0x4, no 1394a enhancements = 0x8, disable MSI = 0x10, TI SLLZ059 erratum = 0x20, IR wake unreliable = 0x40) (int)
	debug = 
	Verbose logging (default = 0, AT/AR events = 1, self-IDs = 2, IRQs = 4, busReset events = 8, or a combination, or all = -1) (int)
	remote_dma = 
	Enable unfiltered remote DMA (default = N) (bool)
	mpt_msi_enable_spi = 
	 Enable MSI Support for SPI controllers (default=0) (int)
	mpt_msi_enable_fc = 
	 Enable MSI Support for FC controllers (default=0) (int)
	mpt_msi_enable_sas = 
	 Enable MSI Support for SAS controllers (default=0) (int)
	mpt_channel_mapping = 
	 Mapping id's to channels (default=0) (int)
	mpt_debug_level = 
	 debug level - refer to mptdebug.h - (default=0)
	mpt_fwfault_debug = 
	Enable detection of Firmware fault and halt Firmware on fault - (default=0) (int)
	log2_irq_thresh = 
	log2 IRQ latency, 1-64 microframes (int)
	park = 
	park setting; 1-3 back-to-back async packets (uint)
	ignore_oc = 
	ignore bogus hardware overcurrent indications (bool)
	dev_flags = 
	Given scsi_dev_flags=vendor:model:flags[,v:m:f] add black/white list entries for vendor and model with an integer value of flags to the scsi device info list (string)
	default_dev_flags = 
	scsi default device flag uint64_t value (ullong)
	max_luns = 
	last scsi LUN (should be between 1 and 2^64-1) (ullong)
	scan = 
	sync, async, manual, or none. Setting to 'manual' disables automatic scanning, but allows for manual device scan via the 'scan' sysfs attribute. (string)
	inq_timeout = 
	Timeout (in seconds) waiting for devices to answer INQUIRY. Default is 20. Some devices may need more; most need less. (uint)
	eh_deadline = 
	SCSI EH timeout in seconds (should be between 0 and 2^31-1) (int)
	scsi_logging_level = 
	a bit mask of logging levels (int)
	quirks = 
	Add/modify USB quirks by specifying quirks=vendorID:productID:quirks
	usbfs_snoop = 
	true to log all usbfs traffic (bool)
	usbfs_snoop_max = 
	maximum number of bytes to print while snooping (uint)
	usbfs_memory_mb = 
	maximum MB allowed for usbfs buffers (0 = no limit) (uint)
	authorized_default = 
	Default USB device authorization: 0 is not authorized, 1 is authorized, 2 is authorized for internal devices, -1 is authorized except for wireless USB (default, old behaviour) (int)
	blinkenlights = 
	true to cycle leds on hubs (bool)
	initial_descriptor_timeout = 
	initial 64-byte descriptor request timeout in milliseconds (default 5000 - 5.0 seconds) (int)
	old_scheme_first = 
	start with the old device initialization scheme (bool)
	use_both_schemes = 
	try the other device initialization scheme if the first one fails (bool)
	nousb = 
	 (bool)
	autosuspend = 
	default autosuspend delay (int)
	debug_event = 
	Log WMI Events [0/1] (bool)
	debug_dump_wdg = 
	Dump available WMI interfaces [0/1] (bool)
	lid_report_interval = 
	Interval (ms) between lid key events (ulong)
	lid_init_state = 
	Behavior for reporting LID initial state

