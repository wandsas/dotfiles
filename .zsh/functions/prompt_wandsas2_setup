#
# Wandsas prompt
#

prompt_wandsas2_help () {
  cat <<'EOF'
This prompt is color-scheme-able.  You can invoke it thus:

  prompt wandsas2 [ 8bit ] [<color1> [<color2> [<color3>] [<color4>]]

If you have either UTF-8 or the `nexus' or `vga' console fonts or similar,
you can specify the `8bit' option to use 8-bit replacements for the
7-bit characters.

EOF
}

function prompt_wandsas2_setup {
	setopt PROMPT_SUBST
  prompt_opts=(cr subst percent)
  typeset -A -g prompt_color

	# Load required function
	autoload -Uz add-zsh-hook

	# Add required hook-functions
	add-zsh-hook precmd  prompt_wandsas2_precmd

	setopt EXTENDED_GLOB
	unsetopt BRACE_CCL

	# See if we can use colors.
	autoload colors zsh/terminfo
	if (( $terminfo[colors] >= 8 )) { colors }
	typeset -a color_arg
	prompt_color[c0]="%{$terminfo[sgr0]%}"

	color_arg=(blue green magenta red)
	for (( i=1, j=1; i<=4; i++, j+=2 )) {
		prompt_color[c$j]="%{$fg_bold[${(L)color_arg[$i]}]%}"
		prompt_color[c$(($j+1))]="%{$fg[${(L)color_arg[$i]}]%}"
	}

	# Use extended characters to get a nicer look:
	# 	s=shift u=upper l=lower|left c=corner
	typeset -A altchar
	set -A altchar ${(s..)terminfo[acsc]}
	prompt_color[set]="%{$terminfo[enacs]%}"
	prompt_color[s-in]="%{$terminfo[smacs]%}"
	prompt_color[s-out]="%{$terminfo[rmacs]%}"
	prompt_color[bar]=${altchar[q]:--}
	prompt_color[ulc]=${altchar[l]:--}
	prompt_color[llc]=${altchar[m]:--}
	prompt_color[lrc]=${altchar[j]:--}
	prompt_color[urc]=${altchar[k]:--}
	unset altchar

	# Finally, set up the prompt
	PROMPT=
	PROMPT+='$prompt_color[set]$prompt_color[screen]${(e)prompt_color[titlebar]}'
	PROMPT+='$prompt_color[c6]$prompt_color[s-in]$prompt_color[ulc]$prompt_color[c2]'
	PROMPT+='$prompt_color[bar]$prompt_color[s-out]($prompt_color[c5]%(!.$prompt_color[c7]'
	PROMPT+='.$prompt_color[c3])%#$prompt_color[c5]$prompt_color[c2]·$prompt_color[c5]'
	PROMPT+='%m:%l$prompt_color[c2]·$prompt_color[c5]${(e)prompt_color[apm]}'
	PROMPT+='$prompt_color[c1]%D{%m/%d}$prompt_color[c6]·%D{%H:%M}$prompt_color[c2])'
	PROMPT+='$prompt_color[s-in]$prompt_color[bar]$prompt_color[c5]$prompt_color[bar]'
	PROMPT+='${(%e)prompt_color[fil]}$prompt_color[c2]$prompt_color[bar]$prompt_color[s-out]'
	PROMPT+='($prompt_color[c5]%$prompt_color[len]<...<%~%<<$prompt_color[c1]'
	PROMPT+='${(%)vcs_info_msg_0_[1,15]}$prompt_color[c5]$prompt_color[c2])'
	PROMPT+='$prompt_color[s-in]$prompt_color[bar]$prompt_color[c6]$prompt_color[urc]'
	PROMPT+='$prompt_color[s-out]$prompt_color[c6]$prompt_color[s-in]
'
	PROMPT+='$prompt_color[llc]$prompt_color[c2]$prompt_color[bar]$prompt_color[s-out]'
	PROMPT+='%(!.$prompt_color[c7].$prompt_color[c3])»$prompt_color[c0] '

	RPROMPT=' '
	RPROMPT+='%(?..$prompt_color[c2]$prompt_color[s-out]($prompt_color[c7]'
	RPROMPT+='%?$prompt_color[c2]%))«$prompt_color[s-in]$prompt_color[bar]'
	RPROMPT+='$prompt_color[c6]$prompt_color[lrc]$prompt_color[s-out]$prompt_color[c0]'

	PS2=
	PS2+='$prompt_color[c6]$prompt_color[s-in]$prompt_color[bar]$prompt_color[s-out]'
	PS2+='$prompt_color[c2]$prompt_color[s-in]$prompt_color[bar]$prompt_color[s-out]'
	PS2+='($prompt_color[c4]%_$prompt_color[c2])$prompt_color[s-in]$prompt_color[bar]$prompt_color[s-out]'
	PS2+='$prompt_color[c6]$prompt_color[s-in]$prompt_color[bar]$prompt_color[s-out]$prompt_color[c0] '
}

function prompt_wandsas2_precmd {
	autoload -Uz vcs_info

	zstyle ':vcs_info:*' enable bzr hg git svn
	zstyle ':vcs_info:*:prompt:*' check-for-changes true
	zstyle ':vcs_info:*:prompt:*' get-revision true
	zstyle ':vcs_info:*:prompt:*' unstagedstr '*'
	zstyle ':vcs_info:*:prompt:*' stagedstr '+'
	zstyle ':vcs_info:*:prompt:*' actionformats '%a'
	zstyle ':vcs_info:*:prompt:*' formats '·%s:%b%u'
	zstyle ':vcs_info:*:prompt:*' branchformat '%b'
	zstyle ':vcs_info:*:prompt:*' nvcsformats ''
	vcs_info 'prompt'

	# Truncate the path if it's too long
	local offset width
	case $TERM {
		(xterm*|*rxvt*|*screen*) offset=2;;
		(linux)         offset=1;;
		(*)             offset=0;;
	}
	(( width = $COLUMNS - $offset ))

	local promptsize=${#${(%):--(%#·%m/%l·%D{%m/%d}:%H:%M)--(${(%)vcs_info_msg_0_[1,15]})--}}
	local pwdsize=${#${(%):-%~}}

	if (( ($promptsize + $pwdsize) > $width )) {
		(( prompt_color[len] = $width - $promptsize ))
	} else {
		prompt_color[fil]=\${(l.$(( $width - $promptsize - $pwdsize ))..$prompt_color[bar].)}
	}
}

prompt_wandsas2_setup "$@"

# vim:fenc=utf-8:ft=zsh:ts=2:sts=0:sw=2:et:
