[user]
  name = crosshatcher
  email = crosshatcher@onionmail.org
  signkey = 0x6359AA042FBC06D2
[core]
  pager = less -+$LESS -FRX
  #pager = diff-so-fancy | less --tabs=4 -FRX
  hooksPath = .git/hooks
[gpg]
  program = gpg
[init]
  templateDir = ${HOME}/.config/git/template
	defaultBranch = master
[push]
  default = simple
[commit]
  gpgsign = true
[diff]
  renames = copies
[merge "wiggle"]
	name = "Wiggle flexible merging"
	driver = wiggle -o %A %A %O %B
	recursive = binary
[mergetool "wiggle"]
	cmd = wiggle -B -o $MERGED $LOCAL $BASE $REMOTE
[difftool "wiggle"]
	cmd = wiggle -Bd $LOCAL $REMOTE
[url "git@github.com:"]
	insteadOf = https://github.com/
[sendemail]
	suppresscc = self
	confirm = always
	annotate = true
[am]
	messageid = yes
[advice]
	addIgnoredFile = false
[submodule]
	recurse = true
[interactive]
	diffFilter = diff-so-fancy --patch
[color]
	ui = true
 branch = yes
  pager = yes
  diff = auto
  status = auto
  interactive = always
[color "branch"]
  current = green
  local = yellow
  remote  = cyan
[color "diff"]
  meta = yellow
  frag = magenta
  old = red
  new = green
[color "interactive"]
  error = red bold
[color "status"]
  header = magenta
  added = yellow
  changed = green
  untracked = cyan

[alias]
    l = log --pretty='format:%h %s%d' -n 20 --graph
	alias = "!git config -l | sed -n 's/^alias\\.//p'"
	which = "!_() { git config --global --get alias.$1;};_"
	st = status -s -uno
	stu = status -s -unormal
	ix = diff --cached
	d = diff -c HEAD
	dd = diff -c HEAD --name-status
	tree = log --oneline --decorate --graph
	news = log -p @{1}..
	lg = log --date=short --pretty='%cd %h%d %s'
	leg = log --date=short --pretty='%cd %h%d %aE: %s'
	lop = log -p
	puff = pull --ff-only
	pura = pull --rebase --autostash
	up = pull --rebase --autostash
	sprunge = "!_(){ git format-patch --stdout \"$@\" |curl -sF 'sprunge=<-' http://sprunge.us ;}; _"
	prev = checkout HEAD^
	ignored = ls-files --others -i --exclude-standard
	madd = "!git diff --name-only --diff-filter=U -z | xargs -0r grep -LZ '<<<<<<<' | xargs -0r git add -v"
	medit = "!git diff --name-only --diff-filter=U -z | xargs -0r grep -lZ '<<<<<<<' | xargs -0ro vim '+/<<<<<<<'"
	mlist = "!git diff --name-only --diff-filter=U"
	this = "!git rev-parse --show-prefix 2>/dev/null || { git init && git add . && git commit -m \"Initial import of ${PWD##*/}\";}"
	git = !git
	tig = !tig
	sl = stash list --name-status --pretty='format:%gd [%ar]: %s'
	autosquash = "!git rebase -i --autostash --autosquash $(git merge-base HEAD ${@:-'@{u}'})"
	rank = shortlog -sn --no-merges
	scissor = "!_(){ git format-patch --stdout \"${@:-@^}\" | awk 'BEGIN{print \"-- >8 --\"} !/^From/ && !/^Date/' ;}; _"
	sub = submodule update --init --recursive
	refresh = "!git diff -z --relative --name-only @^ | GIT_COMMITTER_DATE=$(git show -s --format=%cI @) xargs -0r git commit --amend --no-edit"
	renames = "!_() { git log --name-status --format= --diff-filter=R --reverse \"$@\" | awk -F\"\\t\" 'BEGIN{PROCINFO[\"sorted_in\"]=\"@val_str_asc\"}/^R/{m[$3]=m[$2]?m[$2]:$2;delete m[$2]}END{for(f in m)if(m[f]!=f)print m[f]\" => \"f}'; }; _"
	churn = !git log --all -M -C --name-only --format='format:' "$@" | grep . | sort | uniq -c | sort
	whoami = !git var GIT_COMMITTER_IDENT | sed 's/>.*/>/'
	ls = ls-files
	amu = "!_() { url=$1; shift; curl -sL \"$url\" | gunzip -f | git am "$@"; }; _"
	fx = commit --amend --no-edit
	fcommit = "!_() { f=$1; shift; git commit -m \"${f#.}: $*\" -- "$f"; }; _"
	change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [ \\\"$`echo $VAR`\\\" = '$OLD' ]; then export $VAR='$NEW'; fi\" $@; }; f "
	push-branch = push -u origin HEAD
	source = remote get-url origin
	lazytag = "!_() { t=$1; shift; git tag -a "$t" -m "$t" "$@"; }; _"

# vim:fenc=utf-8:ft=git:ts=2:sts=2:sw=2:et:
[pull]
	rebase = true
